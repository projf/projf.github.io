<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Project F: FPGA Dev</title>
    <link>https://projectf.io/posts/</link>
    <description>Recent content in Posts on Project F: FPGA Dev</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <copyright>Â©2022 Will Green, Project F</copyright>
    <lastBuildDate>Tue, 13 Dec 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://projectf.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Verilog Vectors and Arrays</title>
      <link>https://projectf.io/posts/verilog-vectors-arrays/</link>
      <pubDate>Tue, 13 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>https://projectf.io/posts/verilog-vectors-arrays/</guid>
      <description>Welcome back to my series covering mathematics and algorithms with FPGAs. In this part, we dig into vectors and arrays, including slicing, configurable widths, for loops, and bit and byte ordering.
This post is being written during December 2022 and January 2023.
New to the series? Start with Numbers in Verilog.
Get in touch: GitHub Issues, 1BitSquared Discord, @WillFlux (Mastodon), @WillFlux (Twitter)
Series Outline Numbers in Verilog - introduction to numbers in Verilog Vectors and Arrays (this post) - working with Verilog vectors and arrays Multiplication with DSPs - efficient multiplication with FPGA DSPs Fixed-Point Numbers in Verilog - precision without complexity More maths in 2023 Sponsor My Work</description>
    </item>
    
    <item>
      <title>Rasterbars</title>
      <link>https://projectf.io/posts/rasterbars/</link>
      <pubDate>Wed, 23 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>https://projectf.io/posts/rasterbars/</guid>
      <description>This FPGA demo effect renders four animated rasterbars. I created this effect with benjamin.computer for All You Need, a Chapterhouse prod released at Revision 2022.
For an introduction to rasterbars and other simple graphics effects, check out Racing the Beam.
The design was originally for a custom Artix-7 dev board, but this version runs on the Digilent Arty or as a Verilator/SDL simulation on your computer.
Get in touch: GitHub Issues, 1BitSquared Discord, @WillFlux (Mastodon), @WillFlux (Twitter)</description>
    </item>
    
    <item>
      <title>Sine Scroller</title>
      <link>https://projectf.io/posts/sinescroll/</link>
      <pubDate>Mon, 24 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://projectf.io/posts/sinescroll/</guid>
      <description>This FPGA demo effect renders a horizontally scrolling message along a sine wave. I created this effect with benjamin.computer for All You Need, a Chapterhouse prod released at Revision 2022.
The design was originally for a custom Artix-7 dev board, but this version runs on the Digilent Arty or as a Verilator/SDL simulation on your computer.
Get in touch: GitHub Issues, 1BitSquared Discord, @WillFlux (Mastodon), @WillFlux (Twitter)
What is a Sine Scroller?</description>
    </item>
    
    <item>
      <title>News: September 2022</title>
      <link>https://projectf.io/posts/news-2022-09/</link>
      <pubDate>Thu, 22 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>https://projectf.io/posts/news-2022-09/</guid>
      <description>Welcome to Project F news for July, August, and September 2022. There are four blog posts to cover and plans for the remainder of 2022. Watch out for more news in December 2022.
For more frequent updates on new blog posts and FPGA designs, follow @WillFlux (Mastodon) or @WillFlux (Twitter). You can also find me on 1BitSquared Discord and open a GitHub Issue if you spot a bug or have a feature request.</description>
    </item>
    
    <item>
      <title>Castle Drawing</title>
      <link>https://projectf.io/posts/castle-drawing/</link>
      <pubDate>Sun, 11 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>https://projectf.io/posts/castle-drawing/</guid>
      <description>In this FPGA demo, we use multiple shapes (rectangles, triangles, circles) to render a simple picture of a castle. We don&amp;rsquo;t use any software or CPU, just shape rasterization and finite state machines. As our FPGA graphics capabilities improve, I&amp;rsquo;ll add more features to this drawing. Stay tuned.
The design runs on the Digilent Arty or as a Verilator/SDL simulation on your computer.
Get in touch: GitHub Issues, 1BitSquared Discord, @WillFlux (Mastodon), @WillFlux (Twitter)</description>
    </item>
    
    <item>
      <title>News: June 2022</title>
      <link>https://projectf.io/posts/news-2022-06/</link>
      <pubDate>Fri, 24 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://projectf.io/posts/news-2022-06/</guid>
      <description>Project F news is back! It&amp;rsquo;s been a while, so this edition covers the first half of 2022. There are six new blog posts to cover as well as plans for the next few months. News will now be quarterly, with the next update in late September 2022.
For more frequent updates on new blog posts and FPGA designs, follow @WillFlux (Mastodon) or @WillFlux (Twitter). You can also find me on 1BitSquared Discord and open a GitHub Issue if you spot a bug or have a feature request.</description>
    </item>
    
    <item>
      <title>Lib: clock/xd</title>
      <link>https://projectf.io/posts/lib-clock-xd/</link>
      <pubDate>Wed, 15 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://projectf.io/posts/lib-clock-xd/</guid>
      <description>Sometimes you need to send a single pulse from one clock domain to another. This is a simple case of clock domain crossing or CDC. This post uses the xd module from the Project F Library to handle such situations simply and safely. This post was last updated in October 2022.
Get in touch: GitHub Issues, 1BitSquared Discord, @WillFlux (Mastodon), @WillFlux (Twitter)
Sponsor My Work
If you like what I do, consider sponsoring me on GitHub.</description>
    </item>
    
    <item>
      <title>Display Signals</title>
      <link>https://projectf.io/posts/display-signals/</link>
      <pubDate>Sat, 07 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://projectf.io/posts/display-signals/</guid>
      <description>Welcome back to Exploring FPGA Graphics. Last time, we played Pong against our FPGA; this time, we revisit displays signals and learn about palettes and indexed colour. This post was last updated in June 2022.
In this series, we learn about graphics at the hardware level and get a feel for the power of FPGAs. We&amp;rsquo;ll learn how screens work, play Pong, create starfields and sprites, paint Michelangelo&amp;rsquo;s David, draw lines and triangles, and animate characters and shapes.</description>
    </item>
    
    <item>
      <title>Racing the Beam</title>
      <link>https://projectf.io/posts/racing-the-beam/</link>
      <pubDate>Sat, 12 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://projectf.io/posts/racing-the-beam/</guid>
      <description>Welcome back to Exploring FPGA Graphics. Last time, we got introduction to FPGA graphics; now, we&amp;rsquo;re ready to put our graphical skills to work with some simple demo effects. I hope these examples inspire you to create your own effects and improve your hardware design skills. This post was last updated in November 2022.
In this series, we learn about graphics at the hardware level and get a feel for the power of FPGAs.</description>
    </item>
    
    <item>
      <title>News: November 2021</title>
      <link>https://projectf.io/posts/news-2021-11/</link>
      <pubDate>Fri, 03 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://projectf.io/posts/news-2021-11/</guid>
      <description>Welcome to your November news from Project F. This month&amp;rsquo;s new blog post covers multiplication with DSPs, plus there are loads of interesting links and an FPGA advent calendar. I&amp;rsquo;m also happy to report that the main Project F repo projf-explore passed 200 stars on GitHub.
Want to get in touch? Share your thoughts with @WillFlux or find me on 1BitSquared Discord.
The Project F blog is resting over the winter.</description>
    </item>
    
    <item>
      <title>Multiplication with FPGA DSPs</title>
      <link>https://projectf.io/posts/multiplication-fpga-dsps/</link>
      <pubDate>Sat, 27 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://projectf.io/posts/multiplication-fpga-dsps/</guid>
      <description>Welcome back to my series covering mathematics and algorithms with FPGAs.
Project F is known for its practical, hands-on tutorials. So, I decided to dedicate a post to a topic usually ignored by introductory guides: multiplication with DSPs. This post was last updated in November 2022.
New to the series? Start with Numbers in Verilog.
Get in touch: GitHub Issues, 1BitSquared Discord, @WillFlux (Mastodon), @WillFlux (Twitter)
Series Outline Numbers in Verilog - introduction to numbers in Verilog Vectors and Arrays - working with Verilog vectors and arrays Multiplication with FPGA DSPs (this post) - efficient multiplication with DSPs Fixed-Point Numbers in Verilog - precision without complexity More maths in 2023 Sponsor My Work</description>
    </item>
    
    <item>
      <title>News: October 2021</title>
      <link>https://projectf.io/posts/news-2021-10/</link>
      <pubDate>Sun, 31 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://projectf.io/posts/news-2021-10/</guid>
      <description>Welcome to October&amp;rsquo;s update from Project F. This month, we build a rainbow from circles, learn more about numbers in Verilog, find a UART in the library, and hear about exciting FPGA projects from Ben Blundell and Rob Shelton.
Want to get in touch? Share your thoughts with @WillFlux or find me on 1BitSquared Discord.
Read the November 2021 news or see the news archive.
Filled Circles I&amp;rsquo;ve added a new filled circle drawing module to the Verilog Library.</description>
    </item>
    
    <item>
      <title>News: September 2021</title>
      <link>https://projectf.io/posts/news-2021-09/</link>
      <pubDate>Sat, 09 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://projectf.io/posts/news-2021-09/</guid>
      <description>Project F news is your monthly bowl of FPGA goodness with tasty tips and links from other developers mixed in. This month I began a new series on Maths &amp;amp; Algorithms, added a new rotation demo, and started a new blog on computing history. September also saw the release of Yosys 0.10 and the sad death of Sir Clive Sinclair.
Want to get in touch? Share your thoughts with @WillFlux or find me on 1BitSquared Discord.</description>
    </item>
    
    <item>
      <title>Numbers in Verilog</title>
      <link>https://projectf.io/posts/numbers-in-verilog/</link>
      <pubDate>Thu, 30 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://projectf.io/posts/numbers-in-verilog/</guid>
      <description>Welcome to my ongoing series covering mathematics and algorithms with FPGAs. This series begins with the basics of Verilog numbers, then considers fixed-point, division, square roots and CORDIC before covering more complex algorithms, such as data compression. This post was last updated in December 2022.
In this first post, we consider integers, dig into the challenges of signed numbers and expressions, and then finish with a bit of arithmetic.
This post was completely revised in November 2022.</description>
    </item>
    
    <item>
      <title>News: August 2021</title>
      <link>https://projectf.io/posts/news-2021-08/</link>
      <pubDate>Fri, 03 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://projectf.io/posts/news-2021-08/</guid>
      <description>Project F news is your monthly bowl of FPGA goodness with tasty tips and links from other developers mixed in. August saw my first circle drawn, new graphics designs for iCEBreaker, improved build instructions, and the first draft of a new post covering animated graphics and double buffering.
Want to get in touch? Share your thoughts with @WillFlux or find me on 1BitSquared Discord.
Read the September 2021 news or see the news archive.</description>
    </item>
    
    <item>
      <title>Animated Shapes</title>
      <link>https://projectf.io/posts/animated-shapes/</link>
      <pubDate>Tue, 31 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://projectf.io/posts/animated-shapes/</guid>
      <description>Welcome back to Exploring FPGA Graphics. In the final part of our introductory graphics series, we&amp;rsquo;re looking at animation. We&amp;rsquo;ve already seen animation with hardware sprites, but double buffering gives us maximum creative freedom with fast, tear-free motion. We&amp;rsquo;ll be making extensive use of our designs from 2D Shapes, so have a look back at that post if you need a refresher on drawing shapes.
This post was revised in October 2022.</description>
    </item>
    
    <item>
      <title>News: July 2021</title>
      <link>https://projectf.io/posts/news-2021-07/</link>
      <pubDate>Wed, 04 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://projectf.io/posts/news-2021-07/</guid>
      <description>Project F news is your monthly update on the FPGA project, with tasty tips and links from other developers thrown in. This month, iCE40 SPRAM takes centre stage, filled triangles add graphical goodness, we learn that Linux will fit on an iCEBreaker, and discover FPGAs on Mars. If you have any comments, share your thoughts with @WillFlux or find me on 1BitSquared Discord.
Read the August 2021 news or see the news archive.</description>
    </item>
    
    <item>
      <title>SPRAM on iCE40 FPGA</title>
      <link>https://projectf.io/posts/spram-ice40-fpga/</link>
      <pubDate>Fri, 30 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://projectf.io/posts/spram-ice40-fpga/</guid>
      <description>The iCE40 UltraPlus distinguishes itself from the rest of the iCE40 FPGA family by including a relatively generous 1 Mb (128 KiB) of single port synchronous SRAM known as SPRAM. SPRAM blocks are much larger than BRAM but are limited to a single port and 16-bit data bus.
In this quick how to, we learn how to use SPRAM with Yosys and contrast it with Block RAM. If you want to learn more about other FPGA memory, see FPGA Memory Types.</description>
    </item>
    
    <item>
      <title>News: June 2021</title>
      <link>https://projectf.io/posts/news-2021-06/</link>
      <pubDate>Thu, 01 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://projectf.io/posts/news-2021-06/</guid>
      <description>Project F news is your monthly update on the project, with tasty tips and links thrown in. Last month&amp;rsquo;s issue was well received, so I&amp;rsquo;m continuing with the experiment. June wasn&amp;rsquo;t the easiest of months, with a stint of COVID self-isolation1, but I&amp;rsquo;m happy to have written about Verilator and SDL. If you have any comments, find me on Twitter @WillFlux, or open an issue on GitHub.
Read the July 2021 news or see the news archive.</description>
    </item>
    
    <item>
      <title>Verilog Simulation with Verilator and SDL</title>
      <link>https://projectf.io/posts/verilog-sim-verilator-sdl/</link>
      <pubDate>Fri, 11 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://projectf.io/posts/verilog-sim-verilator-sdl/</guid>
      <description>It can be challenging to test your FPGA or ASIC graphics designs. You can perform low-level behavioural simulations and examine waveforms, but you also need to verify how the video output will appear on the screen.
By combining Verilator and SDL, you can build Verilog simulations that let you see your design on your computer. The thought of creating a graphical simulation can be intimidating, but it&amp;rsquo;s surprisingly simple: you&amp;rsquo;ll have your first simulation running in under an hour.</description>
    </item>
    
    <item>
      <title>News: May 2021</title>
      <link>https://projectf.io/posts/news-2021-05/</link>
      <pubDate>Sun, 30 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://projectf.io/posts/news-2021-05/</guid>
      <description>As well as the occasional big blog post, I make many smaller FPGA discoveries and Project F updates each month. I thought it would be interesting to share a few of these in a monthly news post. What do you think? Let me know via @WillFlux or open an issue on GitHub.
Read the June 2021 news or see the news archive.
Blog In May, I added two blog posts: Hello Arty Part 3 and FPGA Sine Lookup Table.</description>
    </item>
    
    <item>
      <title>FPGA Sine Lookup Table</title>
      <link>https://projectf.io/posts/fpga-sine-table/</link>
      <pubDate>Thu, 27 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://projectf.io/posts/fpga-sine-table/</guid>
      <description>In this how to, we&amp;rsquo;re going to look at a straightforward method for generating sine and cosine using a lookup table. There are more precise methods, but this one is fast and simple and will suffice for many applications. This post was last updated in October 2022.
New to Verilog maths? Check out my introduction to Numbers in Verilog.
Get in touch: GitHub Issues, 1BitSquared Discord, @WillFlux (Mastodon), @WillFlux (Twitter)</description>
    </item>
    
    <item>
      <title>Hello Arty - Part 3</title>
      <link>https://projectf.io/posts/hello-arty-3/</link>
      <pubDate>Mon, 17 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://projectf.io/posts/hello-arty-3/</guid>
      <description>Welcome back to our three-part FPGA tutorial with SystemVerilog and the Digilent Arty A7. In this third instalment, we build a countdown timer and model traffic lights. There&amp;rsquo;s a lot to get through this time: enums, case statements, button debouncing, shift registers, and the all-important finite state machine. This post was last updated in December 2021.
New to the series? Start with part 1.
Get in touch: GitHub Issues, 1BitSquared Discord, @WillFlux (Mastodon), @WillFlux (Twitter)</description>
    </item>
    
    <item>
      <title>Project F Verilog Library</title>
      <link>https://projectf.io/posts/verilog-library-announcement/</link>
      <pubDate>Tue, 27 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://projectf.io/posts/verilog-library-announcement/</guid>
      <description>I like to learn by doing, by trying things out and experimenting. However, this is hard with FPGAs; thereâs a significant lack of practical Verilog designs online. The Project F Library is the latest part of my attempt to make things a little better for FPGA hackers and beginners. Over the last couple of years, Iâve built up a small collection of handy Verilog modules. The Library brings these modules together with documentation and test benches to make them more accessible.</description>
    </item>
    
    <item>
      <title>2D Shapes</title>
      <link>https://projectf.io/posts/fpga-shapes/</link>
      <pubDate>Wed, 17 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://projectf.io/posts/fpga-shapes/</guid>
      <description>Welcome back to Exploring FPGA Graphics. In 2D Shapes, we build on what we learned from Lines and Triangles in two ways: drawing new shapes and learning to colour them in. We&amp;rsquo;ll start with rectangles and filled triangles before moving on to circles. These basic shapes make it possible to create a wide variety of graphics and user interfaces.
This post was revised in September 2022. Expect additional content over soon.</description>
    </item>
    
    <item>
      <title>Hello Nexys - Part 2</title>
      <link>https://projectf.io/posts/hello-nexys-2/</link>
      <pubDate>Thu, 11 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://projectf.io/posts/hello-nexys-2/</guid>
      <description>Welcome back to our three-part FPGA tutorial with SystemVerilog and the Digilent Nexys Video. In part two, we&amp;rsquo;re going to learn about clocks and counting. Along the way, we&amp;rsquo;ll cover maintaining state with flip-flops, timing things with clock dividers, creating our first Verilog module, and controlling LEDs with pulse width modulation. This post is also available for the Arty. This post was last updated in December 2021.
New to the series?</description>
    </item>
    
    <item>
      <title>Lines and Triangles</title>
      <link>https://projectf.io/posts/lines-and-triangles/</link>
      <pubDate>Thu, 28 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://projectf.io/posts/lines-and-triangles/</guid>
      <description>Welcome back to Exploring FPGA Graphics. It&amp;rsquo;s time to turn our attention to drawing. Most modern computer graphics come down to drawing triangles and colouring them in. So, it seems fitting to begin our drawing tour with triangles and the straight lines that form them. This post will implement Bresenham&amp;rsquo;s line algorithm in Verilog and create lines, triangles, and even a cube (our first sort-of 3D). This post was last updated in November 2022.</description>
    </item>
    
    <item>
      <title>Verilog Lint with Verilator</title>
      <link>https://projectf.io/posts/verilog-lint-with-verilator/</link>
      <pubDate>Thu, 31 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://projectf.io/posts/verilog-lint-with-verilator/</guid>
      <description>Hardware design can be unforgiving, so it pays to use any advantage you can get. Verilator is a Verilog simulator and C++ compiler that also supports linting: statically analysing your designs for issues. Not only can Verilator spot problems your synthesis tool might overlook, but it also runs quickly. Verilator is also great for graphics simulation with SDL. This post was last updated in July 2021.
Get in touch: GitHub Issues, 1BitSquared Discord, @WillFlux (Mastodon), @WillFlux (Twitter)</description>
    </item>
    
    <item>
      <title>Square Root in Verilog</title>
      <link>https://projectf.io/posts/square-root-in-verilog/</link>
      <pubDate>Tue, 22 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://projectf.io/posts/square-root-in-verilog/</guid>
      <description>The square root is useful in many circumstances, including statistics, graphics, and signal processing. In this how to, we&amp;rsquo;re going to look at a straightforward digit-by-digit square root algorithm for integer and fixed-point numbers. There are lower-latency methods, but this one is simple, using only subtraction and bit shifts. This post was last updated in June 2021.
New to Verilog maths? Check out my introduction to Numbers in Verilog.
Get in touch: GitHub Issues, 1BitSquared Discord, @WillFlux (Mastodon), @WillFlux (Twitter)</description>
    </item>
    
    <item>
      <title>iCE40 FPGA Toolchain on Linux</title>
      <link>https://projectf.io/posts/building-ice40-fpga-toolchain/</link>
      <pubDate>Wed, 11 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://projectf.io/posts/building-ice40-fpga-toolchain/</guid>
      <description>Since I tested FPGA development tools on Ubuntu 20.04, there have been requests for more posts on FPGA tooling. In this post, I provide a quick guide to building an open-source FPGA toolchain for iCE40 boards, such as iCEBreaker. I plan to cover ECP5 FPGAs in a future version. This post was last updated in February 2022.
This guide is designed for Ubuntu or Pop!_OS 20.04, but should be straightforward to adjust to your own distro.</description>
    </item>
    
    <item>
      <title>Hello Nexys - Part 1</title>
      <link>https://projectf.io/posts/hello-nexys-1/</link>
      <pubDate>Wed, 04 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://projectf.io/posts/hello-nexys-1/</guid>
      <description>This three-part tutorial provides a quick introduction to FPGA development with SystemVerilog and the Digilent Nexys Video board. No prior experience of FPGA development is required, but basic knowledge of programming concepts is assumed. If you can write a simple program with Python or JavaScript, you shouldn&amp;rsquo;t have any trouble. This post was last updated in June 2021.
I find working with FPGAs gives me a sense of delight so often lacking in modern software development.</description>
    </item>
    
    <item>
      <title>Framebuffers</title>
      <link>https://projectf.io/posts/framebuffers/</link>
      <pubDate>Fri, 30 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://projectf.io/posts/framebuffers/</guid>
      <description>Welcome back to Exploring FPGA Graphics. In the previous part, we worked with sprites, but another approach is needed as graphics become more complex. Instead of drawing directly to the screen, we draw to a framebuffer, which is read out to the screen. This post provides an introduction to framebuffers and how to scale them up. We&amp;rsquo;ll also learn how to fizzlefade graphics Wolfenstein 3D style. This post was last updated in November 2022.</description>
    </item>
    
    <item>
      <title>Hardware Sprites</title>
      <link>https://projectf.io/posts/hardware-sprites/</link>
      <pubDate>Wed, 28 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://projectf.io/posts/hardware-sprites/</guid>
      <description>Welcome back to Exploring FPGA Graphics. In the previous part, we updated our display signals and learnt about colour palettes. This part shows you how to create fast, colourful graphics with minimal logic. Hardware sprites maintain much of the simplicity of our Pong design while offering greater creative freedom.
This post was completely revised in June 2022.
In this series, we learn about graphics at the hardware level and get a feel for the power of FPGAs.</description>
    </item>
    
    <item>
      <title>Life on Screen</title>
      <link>https://projectf.io/posts/life-on-screen/</link>
      <pubDate>Tue, 22 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://projectf.io/posts/life-on-screen/</guid>
      <description>In this FPGA demo we&amp;rsquo;ll experiment with Game of Life, a cellular automaton created by John Conway in 1970. This post was last updated in October 2022.
Get in touch: GitHub Issues, 1BitSquared Discord, @WillFlux (Mastodon), @WillFlux (Twitter)
This demo uses an old framebuffer design. For new projects, I recommend Framebuffers.
Requirements For this demo you need an FPGA board with video output. I&amp;rsquo;ll be working with the Digilent Arty, but it should be easy to adapt this design to other boards.</description>
    </item>
    
    <item>
      <title>FPGA Memory Types</title>
      <link>https://projectf.io/posts/fpga-memory-types/</link>
      <pubDate>Mon, 24 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://projectf.io/posts/fpga-memory-types/</guid>
      <description>Designing with FPGAs involves many types of memory, some familiar from other devices, but some that are specific to FPGAs. This how to gives a quick overview of the different flavours, together with their strengths and weaknesses, and some sample designs. This guide includes external memory types, such as SRAM and HBM, that are used in CPUs and GPUs, so much of what is said here is generally applicable, but the focus is on FPGAs.</description>
    </item>
    
    <item>
      <title>FPGA Pong</title>
      <link>https://projectf.io/posts/fpga-pong/</link>
      <pubDate>Thu, 30 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://projectf.io/posts/fpga-pong/</guid>
      <description>Welcome back to Exploring FPGA Graphics. Last time, we raced the beam; this time, we&amp;rsquo;ll recreate the classic arcade Pong and play against our FPGA. This post was last updated in June 2022.
This post was completely revised in April 2022.
In this series, we learn about graphics at the hardware level and get a feel for the power of FPGAs. We&amp;rsquo;ll learn how screens work, play Pong, create starfields and sprites, paint Michelangelo&amp;rsquo;s David, draw lines and triangles, and animate characters and shapes.</description>
    </item>
    
    <item>
      <title>Division in Verilog</title>
      <link>https://projectf.io/posts/division-in-verilog/</link>
      <pubDate>Wed, 01 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://projectf.io/posts/division-in-verilog/</guid>
      <description>Division is a fundamental arithmetic operation; one we take for granted in most contexts. FPGAs are different; Verilog can&amp;rsquo;t synthesize division: we need to do it ourselves. In this how to, we&amp;rsquo;re going to look at a straightforward division algorithm for positive integers and fixed-point numbers. For integers, this method takes one cycle per bit: 32 cycles for 32-bit numbers. This post was last updated June 2021.
New to Verilog maths?</description>
    </item>
    
    <item>
      <title>Video Timings: VGA, SVGA, 720p, 1080p</title>
      <link>https://projectf.io/posts/video-timings-vga-720p-1080p/</link>
      <pubDate>Fri, 26 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://projectf.io/posts/video-timings-vga-720p-1080p/</guid>
      <description>To work with standard monitors and TVs, you need to use the correct video timings. This how to includes the timings for four standard display modes using analogue VGA, DVI, HDMI, or DisplayPort: 640x480 (VGA), 800x600 (SVGA), 1280x720, and 1920x1080 all at 60 Hz.
CRT monitors typically support higher refresh rates in addition to 60 Hz, such as 72 and 85 Hz, but most LCD monitors do not. There are an increasing number of televisions and monitors that do support high refresh rates, but these are beyond the scope of this guide.</description>
    </item>
    
    <item>
      <title>Ad Astra</title>
      <link>https://projectf.io/posts/fpga-ad-astra/</link>
      <pubDate>Wed, 10 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://projectf.io/posts/fpga-ad-astra/</guid>
      <description>These demos combine some of my earliest FPGA designs from 2018: simple sprites and an animated starfield generated with a linear-feedback shift register. I don&amp;rsquo;t recommend using this approach to sprites in new designs, check out the hardware sprites tutorial instead. This post was last updated in August 2022.
Get in touch: GitHub Issues, 1BitSquared Discord, @WillFlux (Mastodon), @WillFlux (Twitter)
Requirements For these demos you need an FPGA board with video output.</description>
    </item>
    
    <item>
      <title>Fixed Point Numbers in Verilog</title>
      <link>https://projectf.io/posts/fixed-point-numbers-in-verilog/</link>
      <pubDate>Tue, 26 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://projectf.io/posts/fixed-point-numbers-in-verilog/</guid>
      <description>Sometimes you need more precision than integers can provide, but floating-point computation is not trivial (try reading IEEE 754). You could use a library or IP block, but simple fixed point maths can often get the job done with little effort. Furthermore, most FPGAs have dedicated DSP blocks that make multiplication and addition of integers fast; we can take advantage of that with a fixed-point approach.
Revised post coming January 2023.</description>
    </item>
    
    <item>
      <title>Beginning FPGA Graphics</title>
      <link>https://projectf.io/posts/fpga-graphics/</link>
      <pubDate>Wed, 20 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://projectf.io/posts/fpga-graphics/</guid>
      <description>Welcome to Exploring FPGA Graphics. In this series, we learn about graphics at the hardware level and get a feel for the power of FPGAs. We&amp;rsquo;ll learn how screens work, play Pong, create starfields and sprites, paint Michelangelo&amp;rsquo;s David, draw lines and triangles, and animate characters and shapes. Along the way, you&amp;rsquo;ll experience a range of designs and techniques, from memory and finite state machines to crossing clock domains and translating C algorithms into Verilog.</description>
    </item>
    
    <item>
      <title>Hello Arty - Part 2</title>
      <link>https://projectf.io/posts/hello-arty-2/</link>
      <pubDate>Wed, 06 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://projectf.io/posts/hello-arty-2/</guid>
      <description>Welcome back to our three-part FPGA tutorial with SystemVerilog and the Digilent Arty A7. In part two, we&amp;rsquo;re going to learn about clocks and counting. Along the way, we&amp;rsquo;ll cover maintaining state with flip-flops, timing things with clock dividers, creating our first Verilog module, and controlling LEDs with pulse width modulation. You might be surprised how far counting takes you: by the end of this tutorial, you&amp;rsquo;ll be creating RGB lighting effects worthy of a cheesy gaming PC.</description>
    </item>
    
    <item>
      <title>Hello Arty - Part 1</title>
      <link>https://projectf.io/posts/hello-arty-1/</link>
      <pubDate>Fri, 24 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://projectf.io/posts/hello-arty-1/</guid>
      <description>This three-part tutorial provides a quick introduction to FPGA development with SystemVerilog and the Digilent Arty A7 board. No prior experience of FPGA development is required, but basic knowledge of programming concepts is assumed. If you can write a simple program with Python or JavaScript, you shouldn&amp;rsquo;t have any trouble. This post was last updated in June 2021.
I find working with FPGAs gives me a sense of delight so often lacking in modern software development.</description>
    </item>
    
    <item>
      <title>Initialize Memory in Verilog</title>
      <link>https://projectf.io/posts/initialize-memory-in-verilog/</link>
      <pubDate>Thu, 16 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://projectf.io/posts/initialize-memory-in-verilog/</guid>
      <description>It&amp;rsquo;s common for a simulation or firmware to need data loading into a memory array, ram, or rom. Fortunately, Verilog provides the $readmemh and $readmemb functions for this very purpose. Unfortunately, there is a dearth of good Verilog documentation online, so using them can be harder than it should be. This how to explains the syntax and provides plenty of examples, including how to do this in Yosys and Xilinx Vivado.</description>
    </item>
    
    <item>
      <title>FPGA Tooling on Ubuntu 20.04</title>
      <link>https://projectf.io/posts/fpga-dev-ubuntu-20.04/</link>
      <pubDate>Mon, 06 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://projectf.io/posts/fpga-dev-ubuntu-20.04/</guid>
      <description>In this post, I test common FPGA tools for compatibility with Ubuntu 20.04 (AKA Focal Fossa), and my regular desktop OS: Pop!_OS 20.04. These tests are in no way exhaustive: I have tried using the applications as I usually do to exercise the main functionality. I have also included instructions for building the tools from source when available. This is my final update for this post (July 2020).
Tested: IceStorm Tools, nextpnr, nMigen, Verilator, Vivado, Yosys Incomplete: Quartus Get in touch: GitHub Issues, 1BitSquared Discord, @WillFlux (Mastodon), @WillFlux (Twitter)</description>
    </item>
    
  </channel>
</rss>
