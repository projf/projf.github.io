<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Graphics on Project F</title><link>https://projectf.io/tags/graphics/</link><description>Recent content in Graphics on Project F</description><generator>Hugo</generator><language>en-gb</language><lastBuildDate>Wed, 22 Jan 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://projectf.io/tags/graphics/index.xml" rel="self" type="application/rss+xml"/><item><title>Mandelbrot in Verilog</title><link>https://projectf.io/posts/mandelbrot-verilog/</link><pubDate>Tue, 07 Mar 2023 00:00:00 +0000</pubDate><guid>https://projectf.io/posts/mandelbrot-verilog/</guid><description>This FPGA demo uses fixed-point multiplication and a small framebuffer to render the Mandelbrot set. You can navigate around the complex plane using buttons on your dev board.</description></item><item><title>Rasterbars</title><link>https://projectf.io/posts/rasterbars/</link><pubDate>Wed, 23 Nov 2022 00:00:00 +0000</pubDate><guid>https://projectf.io/posts/rasterbars/</guid><description>This FPGA demo effect renders four animated rasterbars. I created this effect with benjamin.computer for &lt;em>All You Need&lt;/em>, a Chapterhouse prod released at Revision 2022.</description></item><item><title>Sine Scroller</title><link>https://projectf.io/posts/sinescroll/</link><pubDate>Mon, 24 Oct 2022 00:00:00 +0000</pubDate><guid>https://projectf.io/posts/sinescroll/</guid><description>This FPGA demo effect renders a horizontally scrolling message along a sine wave. I created this effect with benjamin.computer for &lt;em>All You Need&lt;/em>, a Chapterhouse prod released at Revision 2022.</description></item><item><title>Castle Drawing</title><link>https://projectf.io/posts/castle-drawing/</link><pubDate>Sun, 11 Sep 2022 00:00:00 +0000</pubDate><guid>https://projectf.io/posts/castle-drawing/</guid><description>In this FPGA demo, we use multiple shapes (rectangles, triangles, circles) to render a simple picture of a castle. We don&amp;rsquo;t use any software or CPU, just shape rasterization and finite state machines. This Verilog design runs on the Digilent Arty A7 or as a Verilator/SDL simulation on your computer.</description></item><item><title>Display Signals</title><link>https://projectf.io/posts/display-signals/</link><pubDate>Sat, 07 May 2022 00:00:00 +0000</pubDate><guid>https://projectf.io/posts/display-signals/</guid><description>Welcome back to &lt;em>Exploring FPGA Graphics&lt;/em>. Last time, we played Pong against our FPGA; this time, we revisit displays signals and learn about palettes and indexed colour.</description></item><item><title>Racing the Beam</title><link>https://projectf.io/posts/racing-the-beam/</link><pubDate>Sat, 12 Mar 2022 00:00:00 +0000</pubDate><guid>https://projectf.io/posts/racing-the-beam/</guid><description>Welcome back to &lt;em>Exploring FPGA Graphics&lt;/em>. Last time, we got an introduction to FPGA graphics; let&amp;rsquo;s put our new graphical skills to work with some simple demo effects. I hope these examples inspire you to create your own effects and improve your hardware design skills.</description></item><item><title>Animated Shapes</title><link>https://projectf.io/posts/animated-shapes/</link><pubDate>Tue, 31 Aug 2021 00:00:00 +0000</pubDate><guid>https://projectf.io/posts/animated-shapes/</guid><description>Welcome back to &lt;em>Exploring FPGA Graphics&lt;/em>. In the final part of our introductory graphics series, we&amp;rsquo;re looking at animation. We&amp;rsquo;ve already seen animation with hardware sprites, but double buffering gives us maximum creative freedom with fast, tear-free motion.</description></item><item><title>2D Shapes</title><link>https://projectf.io/posts/fpga-shapes/</link><pubDate>Wed, 17 Mar 2021 00:00:00 +0000</pubDate><guid>https://projectf.io/posts/fpga-shapes/</guid><description>Welcome back to Exploring FPGA Graphics. In 2D Shapes, we build on what we learned from Lines and Triangles in two ways: drawing new shapes and learning to colour them in. We&amp;rsquo;ll start with rectangles and filled triangles before moving on to circles. These basic shapes make it possible to create a wide variety of graphics and user interfaces.</description></item><item><title>Lines and Triangles</title><link>https://projectf.io/posts/lines-and-triangles/</link><pubDate>Thu, 28 Jan 2021 00:00:00 +0000</pubDate><guid>https://projectf.io/posts/lines-and-triangles/</guid><description>Welcome back to &lt;em>Exploring FPGA Graphics&lt;/em>. It&amp;rsquo;s time to turn our attention to drawing. Most modern computer graphics come down to drawing triangles and colouring them in. So, it seems fitting to begin our drawing tour with triangles and the straight lines that form them. This post will implement Bresenham&amp;rsquo;s line algorithm in Verilog and create lines, triangles, and even a cube (our first sort-of 3D).</description></item><item><title>Framebuffers</title><link>https://projectf.io/posts/framebuffers/</link><pubDate>Fri, 30 Oct 2020 00:00:00 +0000</pubDate><guid>https://projectf.io/posts/framebuffers/</guid><description>Welcome back to &lt;em>Exploring FPGA Graphics&lt;/em>. In the previous part, we worked with sprites, but another approach is needed as graphics become more complex. Instead of drawing directly to the screen, we draw to a bitmap, which is read out to the screen. This post provides an introduction to framebuffers and how to scale them up. We&amp;rsquo;ll also learn how to fizzlefade graphics Wolfenstein 3D style.</description></item><item><title>Hardware Sprites</title><link>https://projectf.io/posts/hardware-sprites/</link><pubDate>Wed, 28 Oct 2020 00:00:00 +0000</pubDate><guid>https://projectf.io/posts/hardware-sprites/</guid><description>Welcome back to &lt;em>Exploring FPGA Graphics&lt;/em>. In the previous part, we updated our display signals and learnt about colour palettes. This part shows you how to create fast, colourful graphics with minimal logic. Hardware sprites maintain much of the simplicity of our Pong design while offering greater creative freedom.</description></item><item><title>Life on Screen</title><link>https://projectf.io/posts/life-on-screen/</link><pubDate>Tue, 22 Sep 2020 00:00:00 +0000</pubDate><guid>https://projectf.io/posts/life-on-screen/</guid><description>In this FPGA demo we&amp;rsquo;ll experiment with Game of Life, a cellular automaton created by prolific mathematician John Conway in 1970.</description></item><item><title>FPGA Pong</title><link>https://projectf.io/posts/fpga-pong/</link><pubDate>Thu, 30 Jul 2020 00:00:00 +0000</pubDate><guid>https://projectf.io/posts/fpga-pong/</guid><description>Welcome back to &lt;em>Exploring FPGA Graphics&lt;/em>. Last time, we raced the beam; this time, we&amp;rsquo;ll recreate the arcade classic, Pong and play against our FPGA.</description></item><item><title>Video Timings: VGA, SVGA, 720p, 1080p</title><link>https://projectf.io/posts/video-timings-vga-720p-1080p/</link><pubDate>Fri, 26 Jun 2020 00:00:00 +0000</pubDate><guid>https://projectf.io/posts/video-timings-vga-720p-1080p/</guid><description>To work with standard monitors and TVs, you need to use the correct video timings. This how to includes the timings for five standard display modes using analogue VGA, DVI, HDMI, or DisplayPort: 640x480 (VGA), 800x600 (SVGA), 1280x720, and 1920x1080 (30 Hz and 60 Hz).</description></item><item><title>Ad Astra</title><link>https://projectf.io/posts/fpga-ad-astra/</link><pubDate>Wed, 10 Jun 2020 00:00:00 +0000</pubDate><guid>https://projectf.io/posts/fpga-ad-astra/</guid><description>This collection of related demos combines some of my earliest FPGA designs from 2018: simple sprites and an animated starfield generated with a linear-feedback shift register.</description></item><item><title>Beginning FPGA Graphics</title><link>https://projectf.io/posts/fpga-graphics/</link><pubDate>Wed, 20 May 2020 00:00:00 +0000</pubDate><guid>https://projectf.io/posts/fpga-graphics/</guid><description>Welcome to &lt;em>Exploring FPGA Graphics&lt;/em>. In this series, we learn about graphics at the hardware level and get a feel for the power of FPGAs. We&amp;rsquo;ll learn how screens work, play Pong, create starfields and sprites, paint Michelangelo&amp;rsquo;s David, draw lines and triangles, and animate characters and shapes. Along the way, you&amp;rsquo;ll experience a range of designs and techniques, from memory and finite state machines to crossing clock domains and translating C algorithms into Verilog.</description></item></channel></rss>