<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>graphics on Project F: FPGA Dev</title>
    <link>https://projectf.io/tags/graphics/</link>
    <description>Recent content in graphics on Project F: FPGA Dev</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <copyright>Â©2022 Will Green, Project F</copyright>
    <lastBuildDate>Sat, 07 May 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://projectf.io/tags/graphics/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Display Signals</title>
      <link>https://projectf.io/posts/display-signals/</link>
      <pubDate>Sat, 07 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://projectf.io/posts/display-signals/</guid>
      <description>Welcome back to Exploring FPGA Graphics. Last time, we played Pong against our FPGA; this time, we revisit displays signals and learn about palettes and indexed colour. This post was last updated in June 2022.
In this series, we learn about graphics at the hardware level and get a feel for the power of FPGAs. We&amp;rsquo;ll learn how screens work, play Pong, create starfields and sprites, paint Michelangelo&amp;rsquo;s David, draw lines and triangles, and animate characters and shapes.</description>
    </item>
    
    <item>
      <title>Racing the Beam</title>
      <link>https://projectf.io/posts/racing-the-beam/</link>
      <pubDate>Sat, 12 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://projectf.io/posts/racing-the-beam/</guid>
      <description>Welcome back to Exploring FPGA Graphics. Last time, we got introduction to FPGA graphics; now, we&amp;rsquo;re ready to put our graphical skills to work with some simple demos. I hope these examples inspire you to create your own demos and improve your hardware design skills. This post was last updated in June 2022.
In this series, we learn about graphics at the hardware level and get a feel for the power of FPGAs.</description>
    </item>
    
    <item>
      <title>Animated Shapes</title>
      <link>https://projectf.io/posts/animated-shapes/</link>
      <pubDate>Tue, 31 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://projectf.io/posts/animated-shapes/</guid>
      <description>Welcome back to Exploring FPGA Graphics. In the final part of our introductory graphics series, we&amp;rsquo;re looking at animation. We&amp;rsquo;ve already seen animation with hardware sprites, but double buffering gives us maximum creative freedom with fast, tear-free motion. We&amp;rsquo;ll be making extensive use of our designs from 2D Shapes, so have a look back at that post if you need a refresher on drawing shapes. This post was last updated in February 2022.</description>
    </item>
    
    <item>
      <title>2D Shapes</title>
      <link>https://projectf.io/posts/fpga-shapes/</link>
      <pubDate>Wed, 17 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://projectf.io/posts/fpga-shapes/</guid>
      <description>Welcome back to Exploring FPGA Graphics. Building on our designs in lines and triangles, we&amp;rsquo;ll draw rectangles, filled triangles and circles. We&amp;rsquo;ll finish off this part by drawing a castle with our shapes. This post was last updated in January 2022.
New version with updated framebuffer design coming summer 2022.
In this series, we learn about graphics at the hardware level and get a feel for the power of FPGAs. We&amp;rsquo;ll learn how screens work, play Pong, create starfields and sprites, paint Michelangelo&amp;rsquo;s David, draw lines and triangles, and animate characters and shapes.</description>
    </item>
    
    <item>
      <title>Lines and Triangles</title>
      <link>https://projectf.io/posts/lines-and-triangles/</link>
      <pubDate>Thu, 28 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://projectf.io/posts/lines-and-triangles/</guid>
      <description>Welcome back to Exploring FPGA Graphics. It&amp;rsquo;s time to turn our attention to drawing. Most modern computer graphics come down to drawing triangles and colouring them in. So, it seems fitting to begin our drawing tour with triangles and the straight lines that form them. This post will implement Bresenham&amp;rsquo;s line algorithm in Verilog, creating lines, triangles, and even a cube (our first sort-of-3D graphic).
This post was completely revised in August 2022.</description>
    </item>
    
    <item>
      <title>Framebuffers</title>
      <link>https://projectf.io/posts/framebuffers/</link>
      <pubDate>Fri, 30 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://projectf.io/posts/framebuffers/</guid>
      <description>Welcome back to Exploring FPGA Graphics. In the previous part, we worked with sprites, but another approach is needed as graphics become more complex. Instead of drawing directly to the screen, we draw to a framebuffer, which is read out to the screen. This post provides an introduction to framebuffers and how to scale them up. We&amp;rsquo;ll also learn how to fizzlefade graphics Wolfenstein 3D style. This post was last updated in July 2022.</description>
    </item>
    
    <item>
      <title>Hardware Sprites</title>
      <link>https://projectf.io/posts/hardware-sprites/</link>
      <pubDate>Wed, 28 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://projectf.io/posts/hardware-sprites/</guid>
      <description>Welcome back to Exploring FPGA Graphics. In the previous part, we updated our display signals and learnt about colour palettes. This part shows you how to create fast, colourful graphics with minimal logic. Hardware sprites maintain much of the simplicity of our Pong design while offering greater creative freedom.
This post was completely revised in June 2022.
In this series, we learn about graphics at the hardware level and get a feel for the power of FPGAs.</description>
    </item>
    
    <item>
      <title>Life on Screen</title>
      <link>https://projectf.io/posts/life-on-screen/</link>
      <pubDate>Tue, 22 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://projectf.io/posts/life-on-screen/</guid>
      <description>In this FPGA demo we&amp;rsquo;ll experiment with Game of Life, a cellular automaton created by John Conway in 1970. This post was last updated in August 2022.
Get in touch: GitHub Issues, 1BitSquared Discord, @WillFlux (Mastodon), @WillFlux (Twitter)
Requirements For this demo you need an FPGA board with video output. I&amp;rsquo;ll be working with the Digilent Arty, but it should be easy to adapt this design to other boards. It helps to be comfortable with programming your FPGA board and reasonably familiar with Verilog.</description>
    </item>
    
    <item>
      <title>FPGA Pong</title>
      <link>https://projectf.io/posts/fpga-pong/</link>
      <pubDate>Thu, 30 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://projectf.io/posts/fpga-pong/</guid>
      <description>Welcome back to Exploring FPGA Graphics. Last time, we raced the beam; this time, we&amp;rsquo;ll recreate the classic arcade Pong and play against our FPGA. This post was last updated in June 2022.
This post was completely revised in April 2022.
In this series, we learn about graphics at the hardware level and get a feel for the power of FPGAs. We&amp;rsquo;ll learn how screens work, play Pong, create starfields and sprites, paint Michelangelo&amp;rsquo;s David, draw lines and triangles, and animate characters and shapes.</description>
    </item>
    
    <item>
      <title>Video Timings: VGA, SVGA, 720p, 1080p</title>
      <link>https://projectf.io/posts/video-timings-vga-720p-1080p/</link>
      <pubDate>Fri, 26 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://projectf.io/posts/video-timings-vga-720p-1080p/</guid>
      <description>To work with standard monitors and TVs, you need to use the correct video timings. This how to includes the timings for four standard display modes using analogue VGA, DVI, HDMI, or DisplayPort: 640x480 (VGA), 800x600 (SVGA), 1280x720, and 1920x1080 all at 60 Hz.
CRT monitors typically support higher refresh rates in addition to 60 Hz, such as 72 and 85 Hz, but most LCD monitors do not. There are an increasing number of televisions and monitors that do support high refresh rates, but these are beyond the scope of this guide.</description>
    </item>
    
    <item>
      <title>Ad Astra</title>
      <link>https://projectf.io/posts/fpga-ad-astra/</link>
      <pubDate>Wed, 10 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://projectf.io/posts/fpga-ad-astra/</guid>
      <description>These demos combine some of my earliest FPGA designs from 2018: simple sprites and an animated starfield generated with a linear-feedback shift register. I don&amp;rsquo;t recommend using this approach to sprites in new designs, check out the hardware sprites tutorial instead. This post was last updated in August 2022.
Get in touch: GitHub Issues, 1BitSquared Discord, @WillFlux (Mastodon), @WillFlux (Twitter)
Requirements For these demos you need an FPGA board with video output.</description>
    </item>
    
    <item>
      <title>Beginning FPGA Graphics</title>
      <link>https://projectf.io/posts/fpga-graphics/</link>
      <pubDate>Wed, 20 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://projectf.io/posts/fpga-graphics/</guid>
      <description>Welcome to Exploring FPGA Graphics. In this series, we learn about graphics at the hardware level and get a feel for the power of FPGAs. We&amp;rsquo;ll learn how screens work, play Pong, create starfields and sprites, paint Michelangelo&amp;rsquo;s David, draw lines and triangles, and animate characters and shapes. Along the way, you&amp;rsquo;ll experience a range of designs and techniques, from memory and finite state machines to crossing clock domains and translating C algorithms into Verilog.</description>
    </item>
    
  </channel>
</rss>
