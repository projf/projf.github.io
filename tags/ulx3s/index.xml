<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ulx3s on Project F</title>
    <link>https://projectf.io/tags/ulx3s/</link>
    <description>Recent content in Ulx3s on Project F</description>
    <generator>Hugo</generator>
    <language>en-gb</language>
    <lastBuildDate>Fri, 21 Mar 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://projectf.io/tags/ulx3s/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>ECP5 FPGA Clock Generation</title>
      <link>https://projectf.io/posts/ecp5-fpga-clock/</link>
      <pubDate>Thu, 30 Jan 2025 00:00:00 +0000</pubDate>
      <guid>https://projectf.io/posts/ecp5-fpga-clock/</guid>
      <description>Yosys and nextpnr have excellent support for Lattice ECP5 FPGAs. However, without using the ECP5 PLL (phase-locked loop), you&amp;rsquo;re stuck running at the speed of your dev board oscillator. This post outlines the architecture of ECP5 PLL and provides several practical examples to get you started with generating custom clock frequencies. Generating your own clock frequencies is much more straightforward than it first appears.</description>
    </item>
    <item>
      <title>Racing the Beam</title>
      <link>https://projectf.io/posts/racing-the-beam/</link>
      <pubDate>Sat, 12 Mar 2022 00:00:00 +0000</pubDate>
      <guid>https://projectf.io/posts/racing-the-beam/</guid>
      <description>Welcome back to &lt;em&gt;Exploring FPGA Graphics&lt;/em&gt;. Last time, we got an introduction to FPGA graphics; let&amp;rsquo;s put our new graphical skills to work with some simple demo effects. I hope these examples inspire you to create your own effects and improve your hardware design skills.</description>
    </item>
    <item>
      <title>Beginning FPGA Graphics</title>
      <link>https://projectf.io/posts/fpga-graphics/</link>
      <pubDate>Wed, 20 May 2020 00:00:00 +0000</pubDate>
      <guid>https://projectf.io/posts/fpga-graphics/</guid>
      <description>Welcome to &lt;em&gt;Exploring FPGA Graphics&lt;/em&gt;. In this series, we learn about graphics at the hardware level and get a feel for the power of FPGAs. We&amp;rsquo;ll learn how screens work, play Pong, create starfields and sprites, paint Michelangelo&amp;rsquo;s David, draw lines and triangles, and animate characters and shapes. Along the way, you&amp;rsquo;ll experience a range of designs and techniques, from memory and finite state machines to crossing clock domains and translating C algorithms into Verilog.</description>
    </item>
  </channel>
</rss>
