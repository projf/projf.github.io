<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>riscv on Project F</title><link>https://projectf.io/tags/riscv/</link><description>Recent content in riscv on Project F</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><lastBuildDate>Thu, 15 Feb 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://projectf.io/tags/riscv/index.xml" rel="self" type="application/rss+xml"/><item><title>RISC-V Assembler: Load Store</title><link>https://projectf.io/posts/riscv-load-store/</link><pubDate>Thu, 15 Feb 2024 00:00:00 +0000</pubDate><guid>https://projectf.io/posts/riscv-load-store/</guid><description>Part four of RISC-V assembler looks at load and store instructions, such as &lt;strong>lw&lt;/strong>, &lt;strong>sw&lt;/strong>, and &lt;strong>lbu&lt;/strong>. We&amp;rsquo;ll also cover memory alignment, addressing modes, and loading symbol addresses.</description></item><item><title>RISC-V Assembler: Shift</title><link>https://projectf.io/posts/riscv-shift/</link><pubDate>Tue, 30 Jan 2024 00:00:00 +0000</pubDate><guid>https://projectf.io/posts/riscv-shift/</guid><description>The third part of our RISC-V assembler series covers shift instructions, such as &lt;strong>sll&lt;/strong> and &lt;strong>srai&lt;/strong>.</description></item><item><title>RISC-V Assembler: Logical</title><link>https://projectf.io/posts/riscv-logical/</link><pubDate>Mon, 29 Jan 2024 00:00:00 +0000</pubDate><guid>https://projectf.io/posts/riscv-logical/</guid><description>The second part of our RISC-V assembler series covers logical instructions, such as &lt;strong>and&lt;/strong> and &lt;strong>xori&lt;/strong>.</description></item><item><title>RISC-V Assembler: Arithmetic</title><link>https://projectf.io/posts/riscv-arithmetic/</link><pubDate>Mon, 15 Jan 2024 00:00:00 +0000</pubDate><guid>https://projectf.io/posts/riscv-arithmetic/</guid><description>In the last few years, we&amp;rsquo;ve seen an explosion of RISC-V CPU designs, especially on FPGA. This series will help you learn and understand 32-bit RISC-V instructions (RV32) and the RISC-V ABI. The first part looks at load immediate, addition, and subtraction. We&amp;rsquo;ll also cover sign extension and pseudoinstructions.</description></item></channel></rss>