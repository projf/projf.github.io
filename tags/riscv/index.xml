<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Riscv on Project F</title><link>https://projectf.io/tags/riscv/</link><description>Recent content in Riscv on Project F</description><generator>Hugo</generator><language>en-gb</language><lastBuildDate>Wed, 22 May 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://projectf.io/tags/riscv/index.xml" rel="self" type="application/rss+xml"/><item><title>RISC-V Assembler: Multiply Divide</title><link>https://projectf.io/posts/riscv-multiply-divide/</link><pubDate>Fri, 17 May 2024 00:00:00 +0000</pubDate><guid>https://projectf.io/posts/riscv-multiply-divide/</guid><description>Integer multiply and divide instructions form the optional &lt;strong>M&lt;/strong> extension. RISC-V extensions allow the customisation of a CPU design, from tiny microcontrollers to powerful server chips. Making multiplication and division optional keeps the base instruction set simple and reduces the size of the smallest RISC-V core. This post also includes a brief overview of common RISC-V extensions.</description></item><item><title>RISC-V Assembler: Jump and Function</title><link>https://projectf.io/posts/riscv-jump-function/</link><pubDate>Tue, 30 Apr 2024 00:00:00 +0000</pubDate><guid>https://projectf.io/posts/riscv-jump-function/</guid><description>Part six of RISC-V assembler begins by examining the RISC-V jump instructions: &lt;strong>jal&lt;/strong> and &lt;strong>jalr&lt;/strong>. Jump instructions are the basis of functions, so we&amp;rsquo;ll then dig into function calls, the RISC-V ABI, calling convention, and how to use the stack.</description></item><item><title>RISC-V Assembler: Branch Set</title><link>https://projectf.io/posts/riscv-branch-set/</link><pubDate>Tue, 19 Mar 2024 00:00:00 +0000</pubDate><guid>https://projectf.io/posts/riscv-branch-set/</guid><description>Part five of RISC-V assembler looks at branch and set instructions, such as &lt;strong>beq&lt;/strong>, &lt;strong>bltu&lt;/strong>, &lt;strong>bgez&lt;/strong>, and &lt;strong>slt&lt;/strong>. RISC-V takes a different approach to branching, even compared to other RISC processors. We&amp;rsquo;ll also cover the zero register, program counter, condition codes, and multi-word addition.</description></item><item><title>RISC-V Assembler: Load Store</title><link>https://projectf.io/posts/riscv-load-store/</link><pubDate>Thu, 15 Feb 2024 00:00:00 +0000</pubDate><guid>https://projectf.io/posts/riscv-load-store/</guid><description>Part four of RISC-V assembler looks at load and store instructions, such as &lt;strong>lw&lt;/strong>, &lt;strong>sw&lt;/strong>, and &lt;strong>lbu&lt;/strong>. We&amp;rsquo;ll also cover memory alignment, addressing modes, and loading symbol addresses.</description></item><item><title>RISC-V Assembler: Shift</title><link>https://projectf.io/posts/riscv-shift/</link><pubDate>Tue, 30 Jan 2024 00:00:00 +0000</pubDate><guid>https://projectf.io/posts/riscv-shift/</guid><description>The third part of our RISC-V assembler series covers shift instructions, such as &lt;strong>sll&lt;/strong> and &lt;strong>srai&lt;/strong>. I&amp;rsquo;ll also explain how to use shift instructions to quickly multiply and divide by powers of two.</description></item><item><title>RISC-V Assembler: Logical</title><link>https://projectf.io/posts/riscv-logical/</link><pubDate>Mon, 29 Jan 2024 00:00:00 +0000</pubDate><guid>https://projectf.io/posts/riscv-logical/</guid><description>The second part of our RISC-V assembler series covers logical instructions, such as &lt;strong>and&lt;/strong> and &lt;strong>xori&lt;/strong>.</description></item><item><title>RISC-V Assembler: Arithmetic</title><link>https://projectf.io/posts/riscv-arithmetic/</link><pubDate>Mon, 15 Jan 2024 00:00:00 +0000</pubDate><guid>https://projectf.io/posts/riscv-arithmetic/</guid><description>In the last few years, we&amp;rsquo;ve seen an explosion of RISC-V CPU designs, especially on FPGA. This series will help you learn and understand 32-bit RISC-V instructions (RV32) and the RISC-V ABI. The first part looks at load immediate, addition, and subtraction. We&amp;rsquo;ll also cover sign extension and pseudoinstructions.</description></item></channel></rss>