<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>explore on Project F - FPGA Development</title>
    <link>https://projectf.io/tags/explore/</link>
    <description>Recent content in explore on Project F - FPGA Development</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <copyright>Â©2022 Will Green, Project F</copyright>
    <lastBuildDate>Sat, 12 Mar 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://projectf.io/tags/explore/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Racing the Beam</title>
      <link>https://projectf.io/posts/racing-the-beam/</link>
      <pubDate>Sat, 12 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://projectf.io/posts/racing-the-beam/</guid>
      <description>Welcome back to Exploring FPGA Graphics. Last time, we got introduction to FPGA graphics; now, we&amp;rsquo;re ready to put our graphical skills to work with some simple demos. I hope these examples inspire you to create your own demos and improve your hardware design skills.
In this series, we explore graphics at the hardware level and get a feel for the power of FPGAs. We&amp;rsquo;ll learn how screens work, play Pong, create starfields and sprites, paint Michelangelo&amp;rsquo;s David, simulate life, draw lines and triangles, and animate characters and shapes.</description>
    </item>
    
    <item>
      <title>Multiplication with FPGA DSPs</title>
      <link>https://projectf.io/posts/multiplication-fpga-dsps/</link>
      <pubDate>Sat, 27 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://projectf.io/posts/multiplication-fpga-dsps/</guid>
      <description>Welcome back to my series covering mathematics and algorithms with FPGAs.
I was initially going to look at real numbers in this part, but Project F is known for its practical, hands-on tutorials. So, I decided to dedicate a post to a topic usually ignored by introductory guides: multiplication with DSPs. We&amp;rsquo;ll cover real numbers in the next post.
New to the series? Start with Numbers in Verilog.
Updated 2021-12-21. Share your thoughts with @WillFlux or find me on 1BitSquared Discord.</description>
    </item>
    
    <item>
      <title>Numbers in Verilog</title>
      <link>https://projectf.io/posts/numbers-in-verilog/</link>
      <pubDate>Thu, 30 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://projectf.io/posts/numbers-in-verilog/</guid>
      <description>Welcome to my new series covering mathematics and algorithms with FPGAs. Whatever hardware you&amp;rsquo;re designing, you&amp;rsquo;re likely to be working with numbers. This series begins with the basics of Verilog numbers, covers simple mathematics, including division and CORDIC, before looking at more complex algorithms, such as data compression.
In this first post, we examine how integers (whole numbers) are represented and dig into the challenges of signed numbers in Verilog.</description>
    </item>
    
    <item>
      <title>Animated Shapes</title>
      <link>https://projectf.io/posts/animated-shapes/</link>
      <pubDate>Tue, 31 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://projectf.io/posts/animated-shapes/</guid>
      <description>Welcome back to Exploring FPGA Graphics. In the final part of our introductory graphics series, we&amp;rsquo;re looking at animation. We&amp;rsquo;ve already seen animation with hardware sprites, but double buffering gives us maximum creative freedom with fast, tear-free motion. We&amp;rsquo;ll be making extensive use of our designs from 2D Shapes, so have a look back at that post if you need a refresher on drawing shapes.
In this series, we explore graphics at the hardware level and get a feel for the power of FPGAs.</description>
    </item>
    
    <item>
      <title>Hello Arty - Part 3</title>
      <link>https://projectf.io/posts/hello-arty-3/</link>
      <pubDate>Mon, 17 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://projectf.io/posts/hello-arty-3/</guid>
      <description>Welcome back to our three-part FPGA tutorial with SystemVerilog and the Digilent Arty A7. In this third instalment, we build a countdown timer and model traffic lights. There&amp;rsquo;s a lot to get through this time: enums, case statements, button debouncing, shift registers, and the all-important finite state machine.
New to the series? Start with part 1.
Updated 2021-12-21. Get in touch with @WillFlux or open an issue on GitHub.
Requirements For this series, we are using the Digilent Arty A7-35T, a $130 dev board based on a Xilinx Artix-7 FPGA.</description>
    </item>
    
    <item>
      <title>2D Shapes</title>
      <link>https://projectf.io/posts/fpga-shapes/</link>
      <pubDate>Wed, 17 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://projectf.io/posts/fpga-shapes/</guid>
      <description>Welcome back to Exploring FPGA Graphics. Building on our designs in lines and triangles, we&amp;rsquo;ll draw rectangles, filled triangles and circles. We&amp;rsquo;ll finish off this part by drawing a castle with our shapes.
In this series, we explore graphics at the hardware level and get a feel for the power of FPGAs. We&amp;rsquo;ll learn how displays work, race the beam with Pong, animate starfields and sprites, paint Michelangelo&amp;rsquo;s David, simulate life with bitmaps, draw lines and shapes, and create smooth animation with double buffering.</description>
    </item>
    
    <item>
      <title>Hello Nexys - Part 2</title>
      <link>https://projectf.io/posts/hello-nexys-2/</link>
      <pubDate>Thu, 11 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://projectf.io/posts/hello-nexys-2/</guid>
      <description>Welcome back to our three-part FPGA tutorial with SystemVerilog and the Digilent Nexys Video. In part two, we&amp;rsquo;re going to learn about clocks and counting. Along the way, we&amp;rsquo;ll cover maintaining state with flip-flops, timing things with clock dividers, creating our first Verilog module, and controlling LEDs with pulse width modulation. This post is also available for the Arty.
New to the series? Start with part 1.
Updated 2021-06-28. Get in touch with @WillFlux or open an issue on GitHub.</description>
    </item>
    
    <item>
      <title>Lines and Triangles</title>
      <link>https://projectf.io/posts/lines-and-triangles/</link>
      <pubDate>Thu, 28 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://projectf.io/posts/lines-and-triangles/</guid>
      <description>Welcome back to Exploring FPGA Graphics. It&amp;rsquo;s time to turn our attention to drawing. Most modern computer graphics come down to drawing triangles and colouring them in. So, it seems fitting to begin our tour of drawing with triangles and the straight lines that form them. This post will implement Bresenham&amp;rsquo;s line algorithm in Verilog, creating lines, triangles, and even a cube (our first sort-of-3D graphic).
In this series, we explore graphics at the hardware level and get a feel for the power of FPGAs.</description>
    </item>
    
    <item>
      <title>Hello Nexys - Part 1</title>
      <link>https://projectf.io/posts/hello-nexys-1/</link>
      <pubDate>Wed, 04 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://projectf.io/posts/hello-nexys-1/</guid>
      <description>This three-part tutorial provides a quick introduction to FPGA development with SystemVerilog and the Digilent Nexys Video board. No prior experience of FPGA development is required, but basic knowledge of programming concepts is assumed. If you can write a simple program with Python or JavaScript, you shouldn&amp;rsquo;t have any trouble.
I find working with FPGAs gives me a sense of delight so often lacking in modern software development. There&amp;rsquo;s something profoundly satisfying about designing at the hardware level, be it drawing graphics on a screen, producing sound from a speaker, or even implementing your own CPU from scratch.</description>
    </item>
    
    <item>
      <title>Framebuffers</title>
      <link>https://projectf.io/posts/framebuffers/</link>
      <pubDate>Fri, 30 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://projectf.io/posts/framebuffers/</guid>
      <description>Welcome back to Exploring FPGA Graphics. In the previous two parts, we worked with sprites, but another approach is needed as graphics become more complex. Instead of drawing directly to the screen, we draw to a framebuffer, which is read out to the screen. This post provides an introduction to framebuffers and how to scale them up. We&amp;rsquo;ll also learn how to fizzlefade graphics Wolfenstein 3D style. In the next part, we&amp;rsquo;ll use a framebuffer to visualize a simulation of life.</description>
    </item>
    
    <item>
      <title>Hardware Sprites</title>
      <link>https://projectf.io/posts/hardware-sprites/</link>
      <pubDate>Wed, 28 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://projectf.io/posts/hardware-sprites/</guid>
      <description>Welcome back to Exploring FPGA Graphics. In the previous part, we recreated Pong. In this part, we learn how to create colourful animated graphics with hardware sprites. Hardware sprites maintain much of the simplicity of our Pong design while offering much greater creative freedom. In the next part, we&amp;rsquo;ll create a demo that gives a taste of what&amp;rsquo;s possible with sprites.
In this series, we explore graphics at the hardware level and get a feel for the power of FPGAs.</description>
    </item>
    
    <item>
      <title>Life on Screen</title>
      <link>https://projectf.io/posts/life-on-screen/</link>
      <pubDate>Tue, 22 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://projectf.io/posts/life-on-screen/</guid>
      <description>Welcome back to Exploring FPGA Graphics. In this post we&amp;rsquo;re going to use the designs we created in Framebuffers to experiment with Conway&amp;rsquo;s Game of Life.
In this series, we explore graphics at the hardware level and get a feel for the power of FPGAs. We&amp;rsquo;ll learn how displays work, race the beam with Pong, animate starfields and sprites, paint Michelangelo&amp;rsquo;s David, simulate life with bitmaps, draw lines and shapes, and create smooth animation with double buffering.</description>
    </item>
    
    <item>
      <title>Pong</title>
      <link>https://projectf.io/posts/fpga-pong/</link>
      <pubDate>Thu, 30 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://projectf.io/posts/fpga-pong/</guid>
      <description>Welcome back to Exploring FPGA Graphics. In the previous part, we got an introduction to FPGA graphics; now we&amp;rsquo;re ready to put our graphical skills to work recreating the arcade classic: Pong.
In this series, we explore graphics at the hardware level and get a feel for the power of FPGAs. We&amp;rsquo;ll learn how displays work, race the beam with Pong, animate starfields and sprites, paint Michelangelo&amp;rsquo;s David, simulate life with bitmaps, draw lines and shapes, and create smooth animation with double buffering.</description>
    </item>
    
    <item>
      <title>Ad Astra</title>
      <link>https://projectf.io/posts/fpga-ad-astra/</link>
      <pubDate>Wed, 10 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://projectf.io/posts/fpga-ad-astra/</guid>
      <description>Welcome back to Exploring FPGA Graphics. In the previous part we learnt how to create hardware sprites. In this fourth part, we create a demo by combining our knowledge of sprites with animated starfields.
In this series, we explore graphics at the hardware level and get a feel for the power of FPGAs. We&amp;rsquo;ll learn how displays work, race the beam with Pong, animate starfields and sprites, paint Michelangelo&amp;rsquo;s David, simulate life with bitmaps, draw lines and shapes, and create smooth animation with double buffering.</description>
    </item>
    
    <item>
      <title>Beginning FPGA Graphics</title>
      <link>https://projectf.io/posts/fpga-graphics/</link>
      <pubDate>Wed, 20 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://projectf.io/posts/fpga-graphics/</guid>
      <description>Welcome to Exploring FPGA Graphics. In this series, we explore graphics at the hardware level and get a feel for the power of FPGAs. We&amp;rsquo;ll learn how screens work, play Pong, create starfields and sprites, paint Michelangelo&amp;rsquo;s David, simulate life, draw lines and triangles, and animate characters and shapes. Along the way, you&amp;rsquo;ll experience a range of designs and techniques, from memory and finite state machines to crossing clock domains and translating C algorithms into Verilog.</description>
    </item>
    
    <item>
      <title>Hello Arty - Part 2</title>
      <link>https://projectf.io/posts/hello-arty-2/</link>
      <pubDate>Wed, 06 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://projectf.io/posts/hello-arty-2/</guid>
      <description>Welcome back to our three-part FPGA tutorial with SystemVerilog and the Digilent Arty A7. In part two, we&amp;rsquo;re going to learn about clocks and counting. Along the way, we&amp;rsquo;ll cover maintaining state with flip-flops, timing things with clock dividers, creating our first Verilog module, and controlling LEDs with pulse width modulation. You might be surprised how far counting takes you: by the end of this tutorial, you&amp;rsquo;ll be creating RGB lighting effects worthy of a cheesy gaming PC.</description>
    </item>
    
    <item>
      <title>Hello Arty - Part 1</title>
      <link>https://projectf.io/posts/hello-arty-1/</link>
      <pubDate>Fri, 24 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://projectf.io/posts/hello-arty-1/</guid>
      <description>This three-part tutorial provides a quick introduction to FPGA development with SystemVerilog and the Digilent Arty A7 board. No prior experience of FPGA development is required, but basic knowledge of programming concepts is assumed. If you can write a simple program with Python or JavaScript, you shouldn&amp;rsquo;t have any trouble.
I find working with FPGAs gives me a sense of delight so often lacking in modern software development. There&amp;rsquo;s something profoundly satisfying about designing at the hardware level, be it drawing graphics on a screen, producing sound from a speaker, or even implementing your own CPU from scratch.</description>
    </item>
    
  </channel>
</rss>
