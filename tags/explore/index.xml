<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>explore on Project F - FPGA Development</title>
    <link>https://projectf.io/tags/explore/</link>
    <description>Recent content in explore on Project F - FPGA Development</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <copyright>Â©2021 Will Green, Project F</copyright>
    <lastBuildDate>Wed, 04 Nov 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://projectf.io/tags/explore/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Hello Nexys - Part 1</title>
      <link>https://projectf.io/posts/hello-nexys-1/</link>
      <pubDate>Wed, 04 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://projectf.io/posts/hello-nexys-1/</guid>
      <description>This three-part tutorial provides a quick introduction to FPGA development with SystemVerilog and the Digilent Nexys Video board. No prior experience of FPGA development is required, but basic knowledge of programming concepts is assumed. If you can write a simple program in Arduino, Python, or JavaScript, then you shouldn&amp;rsquo;t have any trouble. This series is also available for the Arty A7.
I find working with FPGAs gives me a sense of delight so often lacking in modern software development.</description>
    </item>
    
    <item>
      <title>Framebuffers</title>
      <link>https://projectf.io/posts/framebuffers/</link>
      <pubDate>Fri, 30 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://projectf.io/posts/framebuffers/</guid>
      <description>Welcome back to Exploring FPGA Graphics. In the previous two parts, we worked with sprites, but as graphics become more complex, a different approach is needed. Instead of drawing directly to the screen, we draw to a framebuffer, which is read out when required by the screen. This post provides an introduction to framebuffers and how to scale them. We&amp;rsquo;ll also learn how to fizzlefade graphics Wolfenstein 3D style. In the next part, we&amp;rsquo;ll use a framebuffer to visualize a simulation of life.</description>
    </item>
    
    <item>
      <title>Hardware Sprites</title>
      <link>https://projectf.io/posts/hardware-sprites/</link>
      <pubDate>Wed, 28 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://projectf.io/posts/hardware-sprites/</guid>
      <description>Welcome back to Exploring FPGA Graphics. In the previous part, we recreated Pong. In this part, we learn how to create colourful animated graphics with hardware sprites. Hardware sprites maintain much of the simplicity of our Pong design while offering much greater creative freedom. In the next part, we&amp;rsquo;ll create a demo that gives a taste of what&amp;rsquo;s possible with sprites.
In this series, we explore graphics at the hardware level and get a feel for the power of FPGAs.</description>
    </item>
    
    <item>
      <title>Life on Screen</title>
      <link>https://projectf.io/posts/life-on-screen/</link>
      <pubDate>Tue, 22 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://projectf.io/posts/life-on-screen/</guid>
      <description>Welcome back to Exploring FPGA Graphics. In this post we&amp;rsquo;re going to use the designs we created in Framebuffers to experiment with Conway&amp;rsquo;s Game of Life.
In this series, we explore graphics at the hardware level and get a feel for the power of FPGAs. We start by learning how displays work, before racing the beam with Pong, starfields and sprites, simulating life with bitmaps, drawing lines and triangles, and finally creating simple 3D models.</description>
    </item>
    
    <item>
      <title>FPGA Pong</title>
      <link>https://projectf.io/posts/fpga-pong/</link>
      <pubDate>Thu, 30 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://projectf.io/posts/fpga-pong/</guid>
      <description>Welcome back to Exploring FPGA Graphics. In the previous part, we got an introduction to FPGA graphics; now we&amp;rsquo;re ready to put our graphical skills to work recreating the arcade classic: Pong.
In this series, we explore graphics at the hardware level and get a feel for the power of FPGAs. We start by learning how displays work, before racing the beam with Pong, starfields and sprites, simulating life with bitmaps, drawing lines and triangles, and finally creating simple 3D models.</description>
    </item>
    
    <item>
      <title>FPGA Ad Astra</title>
      <link>https://projectf.io/posts/fpga-ad-astra/</link>
      <pubDate>Wed, 10 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://projectf.io/posts/fpga-ad-astra/</guid>
      <description>Welcome back to Exploring FPGA Graphics. In the previous part we learnt how to create hardware sprites. In this fourth part, we create a demo by combining our knowledge of sprites with animated starfields.
In this series, we explore graphics at the hardware level and get a feel for the power of FPGAs. We start by learning how displays work, before racing the beam with Pong, starfields and sprites, simulating life with bitmaps, drawing lines and triangles, and finally creating simple 3D models.</description>
    </item>
    
    <item>
      <title>Exploring FPGA Graphics</title>
      <link>https://projectf.io/posts/fpga-graphics/</link>
      <pubDate>Wed, 20 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://projectf.io/posts/fpga-graphics/</guid>
      <description>Welcome to Exploring FPGA Graphics. In this series, we explore graphics at the hardware level and get a feel for the power of FPGAs. We start by learning how displays work, before racing the beam with Pong, starfields and sprites, simulating life with bitmaps, drawing lines and triangles, and finally creating simple 3D models. I&amp;rsquo;ll be writing and revising this series throughout 2020 and 2021.
In this first post, we learn how computer displays work and animate simple shapes with an FPGA.</description>
    </item>
    
    <item>
      <title>Hello Arty - Part 2</title>
      <link>https://projectf.io/posts/hello-arty-2/</link>
      <pubDate>Wed, 06 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://projectf.io/posts/hello-arty-2/</guid>
      <description>Welcome back to our three-part FPGA tutorial with SystemVerilog and the Digilent Arty A7. In part two, we&amp;rsquo;re going to learn about clocks and counting. Along the way, we&amp;rsquo;ll cover maintaining state with flip-flops, timing things with clock dividers, creating our first Verilog module, and controlling LEDs with pulse width modulation. You might be surprised how far counting takes you: by the end of this tutorial, you&amp;rsquo;ll be creating RGB lighting effects worthy of a cheesy gaming PC.</description>
    </item>
    
    <item>
      <title>Hello Arty - Part 1</title>
      <link>https://projectf.io/posts/hello-arty-1/</link>
      <pubDate>Fri, 24 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://projectf.io/posts/hello-arty-1/</guid>
      <description>This three-part tutorial provides a quick introduction to FPGA development with SystemVerilog and the Digilent Arty A7 board. No prior experience of FPGA development is required, but basic knowledge of programming concepts is assumed. If you can write a simple program in Arduino, Python, or JavaScript, then you shouldn&amp;rsquo;t have any trouble. This series is also available for the Nexys Video.
I find working with FPGAs gives me a sense of delight so often lacking in modern software development.</description>
    </item>
    
  </channel>
</rss>