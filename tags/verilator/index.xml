<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>verilator on Project F - FPGA Development</title>
    <link>https://projectf.io/tags/verilator/</link>
    <description>Recent content in verilator on Project F - FPGA Development</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <copyright>Â©2021 Will Green, Project F</copyright>
    <lastBuildDate>Thu, 31 Dec 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://projectf.io/tags/verilator/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Verilog Lint with Verilator</title>
      <link>https://projectf.io/posts/verilog-lint-with-verilator/</link>
      <pubDate>Thu, 31 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://projectf.io/posts/verilog-lint-with-verilator/</guid>
      <description>Hardware design can be unforgiving, so it pays to use any advantage you can get. Verilator is a Verilog simulator and C++ compiler that also supports linting: statically analysing your designs for issues. Not only can Verilator spot problems your synthesis tool might overlook, but it also runs quickly.
Updated 2021-04-01. Feedback to @WillFlux is most welcome.
Installing Verilator Verilator is available in most Linux distribution repos and will run on Windows Subsystem for Linux.</description>
    </item>
    
    <item>
      <title>Building iCE40 FPGA Toolchain on Linux</title>
      <link>https://projectf.io/posts/building-ice40-fpga-toolchain/</link>
      <pubDate>Wed, 11 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://projectf.io/posts/building-ice40-fpga-toolchain/</guid>
      <description>Since I tested FPGA development tools on Ubuntu 20.04, there have been requests for more posts on FPGA tooling. In this post, I provide a quick guide to building an open-source FPGA toolchain for iCE40 boards, such as iCEBreaker. I plan to cover ECP5 FPGAs in a future version.
This guide is designed for Ubuntu or Pop!_OS 20.04, but should be straightforward to adjust to your own distro. These instructions will work on Windows Subsystem for Linux (WSL), but there&amp;rsquo;s no USB support in WSL, so you can&amp;rsquo;t program boards under WSL.</description>
    </item>
    
  </channel>
</rss>