<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Testing on Project F</title><link>https://projectf.io/tags/testing/</link><description>Recent content in Testing on Project F</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><lastBuildDate>Mon, 15 Jan 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://projectf.io/tags/testing/index.xml" rel="self" type="application/rss+xml"/><item><title>Verilog Simulation with Verilator and SDL</title><link>https://projectf.io/posts/verilog-sim-verilator-sdl/</link><pubDate>Fri, 11 Jun 2021 00:00:00 +0000</pubDate><guid>https://projectf.io/posts/verilog-sim-verilator-sdl/</guid><description>It can be challenging to test your FPGA or ASIC graphics designs. You can perform low-level behavioural simulations and examine waveforms, but you also need to verify how the video output will appear on the screen. By combining &lt;strong>Verilator&lt;/strong> and &lt;strong>SDL&lt;/strong>, you can build Verilog simulations that let you see your design on your computer.</description></item><item><title>Verilog Lint with Verilator</title><link>https://projectf.io/posts/verilog-lint-with-verilator/</link><pubDate>Thu, 31 Dec 2020 00:00:00 +0000</pubDate><guid>https://projectf.io/posts/verilog-lint-with-verilator/</guid><description>Hardware design can be unforgiving, so it pays to use any advantage you can get. &lt;strong>Verilator&lt;/strong> is a Verilog simulator and C++ compiler that also supports linting: statically analysing your designs for issues. Not only can Verilator spot problems your synthesis tool might overlook, but it also runs quickly.</description></item></channel></rss>