<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>hello on Project F</title><link>https://projectf.io/tags/hello/</link><description>Recent content in hello on Project F</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><lastBuildDate>Tue, 21 Dec 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://projectf.io/tags/hello/index.xml" rel="self" type="application/rss+xml"/><item><title>Hello Arty - Part 3</title><link>https://projectf.io/posts/hello-arty-3/</link><pubDate>Mon, 17 May 2021 00:00:00 +0000</pubDate><guid>https://projectf.io/posts/hello-arty-3/</guid><description>Welcome back to our three-part FPGA tutorial with &lt;strong>SystemVerilog&lt;/strong> and the &lt;strong>Digilent Arty A7&lt;/strong>. In this third instalment, we build a countdown timer and model traffic lights. There&amp;rsquo;s a lot to get through this time: enums, case statements, button debouncing, shift registers, and the all-important finite state machine.</description></item><item><title>Hello Nexys - Part 2</title><link>https://projectf.io/posts/hello-nexys-2/</link><pubDate>Thu, 11 Feb 2021 00:00:00 +0000</pubDate><guid>https://projectf.io/posts/hello-nexys-2/</guid><description>Welcome back to our two-part FPGA tutorial with &lt;strong>SystemVerilog&lt;/strong> and the &lt;strong>Digilent Nexys Video&lt;/strong>. In part two, we&amp;rsquo;re going to learn about clocks and counting. Along the way, we&amp;rsquo;ll cover maintaining state with flip-flops, timing things with clock dividers, creating our first Verilog module, and controlling LEDs with pulse width modulation.</description></item><item><title>Hello Nexys - Part 1</title><link>https://projectf.io/posts/hello-nexys-1/</link><pubDate>Wed, 04 Nov 2020 00:00:00 +0000</pubDate><guid>https://projectf.io/posts/hello-nexys-1/</guid><description>This two-part tutorial provides a quick introduction to FPGA development with &lt;strong>SystemVerilog&lt;/strong> and the &lt;strong>Digilent Nexys Video&lt;/strong> board. No prior experience of FPGA development is required, but basic knowledge of programming concepts is assumed. If you can write a simple program with Python or JavaScript, you shouldn&amp;rsquo;t have any trouble.</description></item><item><title>Hello Arty - Part 2</title><link>https://projectf.io/posts/hello-arty-2/</link><pubDate>Wed, 06 May 2020 00:00:00 +0000</pubDate><guid>https://projectf.io/posts/hello-arty-2/</guid><description>Welcome back to our three-part FPGA tutorial with &lt;strong>SystemVerilog&lt;/strong> and the &lt;strong>Digilent Arty A7&lt;/strong>. In part two, we&amp;rsquo;re going to learn about clocks and counting. Along the way, we&amp;rsquo;ll cover maintaining state with flip-flops, timing things with clock dividers, creating our first Verilog module, and controlling LEDs with pulse width modulation. You might be surprised how far counting takes you: by the end of this tutorial, you&amp;rsquo;ll be creating RGB lighting effects worthy of a cheesy gaming PC.</description></item><item><title>Hello Arty - Part 1</title><link>https://projectf.io/posts/hello-arty-1/</link><pubDate>Fri, 24 Apr 2020 00:00:00 +0000</pubDate><guid>https://projectf.io/posts/hello-arty-1/</guid><description>This three-part tutorial provides a quick introduction to FPGA development with &lt;strong>SystemVerilog&lt;/strong> and the &lt;strong>Digilent Arty A7&lt;/strong> board. No prior experience of FPGA development is required, but basic knowledge of programming concepts is assumed. If you can write a simple program with Python or JavaScript, you shouldn&amp;rsquo;t have any trouble.</description></item></channel></rss>