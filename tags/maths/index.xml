<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>maths on Project F: FPGA Dev</title>
    <link>https://projectf.io/tags/maths/</link>
    <description>Recent content in maths on Project F: FPGA Dev</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <copyright>Â©2022 Will Green, Project F</copyright>
    <lastBuildDate>Sat, 27 Nov 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://projectf.io/tags/maths/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Multiplication with FPGA DSPs</title>
      <link>https://projectf.io/posts/multiplication-fpga-dsps/</link>
      <pubDate>Sat, 27 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://projectf.io/posts/multiplication-fpga-dsps/</guid>
      <description>Welcome back to my series covering mathematics and algorithms with FPGAs.
I was initially going to look at real numbers in this part, but Project F is known for its practical, hands-on tutorials. So, I decided to dedicate a post to a topic usually ignored by introductory guides: multiplication with DSPs. We&amp;rsquo;ll cover real numbers in the next post. This post was last updated in December 2021.
New to the series?</description>
    </item>
    
    <item>
      <title>Numbers in Verilog</title>
      <link>https://projectf.io/posts/numbers-in-verilog/</link>
      <pubDate>Thu, 30 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://projectf.io/posts/numbers-in-verilog/</guid>
      <description>Welcome to my new series covering mathematics and algorithms with FPGAs. Whatever hardware you&amp;rsquo;re designing, you&amp;rsquo;re likely to be working with numbers. This series begins with the basics of Verilog numbers, covers simple mathematics, including division and CORDIC, before looking at more complex algorithms, such as data compression. This post was last updated in August 2022.
In this first post, we examine how integers (whole numbers) are represented and dig into the challenges of signed numbers in Verilog.</description>
    </item>
    
    <item>
      <title>FPGA Sine Lookup Table</title>
      <link>https://projectf.io/posts/fpga-sine-table/</link>
      <pubDate>Thu, 27 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://projectf.io/posts/fpga-sine-table/</guid>
      <description>In this how to, we&amp;rsquo;re going to look at a straightforward method for generating sine and cosine using a lookup table. There are more precise methods, but this one is fast and simple and will suffice for many applications. This post was last updated in October 2021.
There are also posts on fixed-point numbers, division, and square root.
Get in touch: GitHub Issues, 1BitSquared Discord, @WillFlux (Mastodon), @WillFlux (Twitter)
Sponsor My Work</description>
    </item>
    
    <item>
      <title>Square Root in Verilog</title>
      <link>https://projectf.io/posts/square-root-in-verilog/</link>
      <pubDate>Tue, 22 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://projectf.io/posts/square-root-in-verilog/</guid>
      <description>The square root is useful in many circumstances, including statistics, graphics, and signal processing. In this how to, we&amp;rsquo;re going to look at a straightforward digit-by-digit square root algorithm for integer and fixed-point numbers. There are lower-latency methods, but this one is simple, using only subtraction and bit shifts. This post was last updated in June 2021.
There are also posts on fixed-point numbers, division, and sine &amp;amp; cosine.
Get in touch: GitHub Issues, 1BitSquared Discord, @WillFlux (Mastodon), @WillFlux (Twitter)</description>
    </item>
    
    <item>
      <title>Life on Screen</title>
      <link>https://projectf.io/posts/life-on-screen/</link>
      <pubDate>Tue, 22 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://projectf.io/posts/life-on-screen/</guid>
      <description>In this FPGA demo we&amp;rsquo;ll experiment with Game of Life, a cellular automaton created by John Conway in 1970. This post was last updated in October 2022.
Get in touch: GitHub Issues, 1BitSquared Discord, @WillFlux (Mastodon), @WillFlux (Twitter)
This demo uses an old framebuffer design. For new projects, I recommend Framebuffers.
Requirements For this demo you need an FPGA board with video output. I&amp;rsquo;ll be working with the Digilent Arty, but it should be easy to adapt this design to other boards.</description>
    </item>
    
    <item>
      <title>Division in Verilog</title>
      <link>https://projectf.io/posts/division-in-verilog/</link>
      <pubDate>Wed, 01 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://projectf.io/posts/division-in-verilog/</guid>
      <description>Division is a fundamental arithmetic operation; one we take for granted in most contexts. FPGAs are different; Verilog can&amp;rsquo;t synthesize division: we need to do it ourselves. In this how to, we&amp;rsquo;re going to look at a straightforward division algorithm for positive integers and fixed-point numbers. For integers, this method takes one cycle per bit: 32 cycles for 32-bit numbers. This post was last updated June 2021.
There are also posts on fixed-point numbers, square root, and sine &amp;amp; cosine.</description>
    </item>
    
    <item>
      <title>Fixed Point Numbers in Verilog</title>
      <link>https://projectf.io/posts/fixed-point-numbers-in-verilog/</link>
      <pubDate>Tue, 26 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://projectf.io/posts/fixed-point-numbers-in-verilog/</guid>
      <description>Sometimes you need more precision than integers can provide, but floating-point computation is not trivial (try reading IEEE 754). You could use a library or IP block, but simple fixed point maths can often get the job done with little effort. Furthermore, most FPGAs have dedicated DSP blocks that make multiplication and addition of integers fast; we can take advantage of that with a fixed-point approach. This post was last updated in May 2021.</description>
    </item>
    
  </channel>
</rss>
