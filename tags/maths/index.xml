<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>maths on Project F</title><link>https://projectf.io/tags/maths/</link><description>Recent content in maths on Project F</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><lastBuildDate>Wed, 14 Feb 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://projectf.io/tags/maths/index.xml" rel="self" type="application/rss+xml"/><item><title>RISC-V Assembler: Shift</title><link>https://projectf.io/posts/riscv-shift/</link><pubDate>Tue, 30 Jan 2024 00:00:00 +0000</pubDate><guid>https://projectf.io/posts/riscv-shift/</guid><description>In this post we look at RISC-V shift instructions, such as sll and srai. These instructions are included in RV32I, the base integer instruction set. New to the series? Check out the first part on arithmetic instructions.
In the last few years, we&amp;rsquo;ve seen an explosion of RISC-V CPU designs, especially on FPGA. Thankfully, RISC-V is ideal for assembly programming with its compact, easy-to-learn instruction set. This series will help you learn and understand 32-bit RISC-V instructions (RV32) and the RISC-V ABI.</description></item><item><title>RISC-V Assembler: Logical</title><link>https://projectf.io/posts/riscv-logical/</link><pubDate>Mon, 29 Jan 2024 00:00:00 +0000</pubDate><guid>https://projectf.io/posts/riscv-logical/</guid><description>In this post we look at RISC-V logical instructions, such as and and xori. These instructions are included in RV32I, the base integer instruction set. New to the series? Check out the first part on arithmetic instructions.
In the last few years, we&amp;rsquo;ve seen an explosion of RISC-V CPU designs, especially on FPGA. Thankfully, RISC-V is ideal for assembly programming with its compact, easy-to-learn instruction set. This series will help you learn and understand 32-bit RISC-V instructions (RV32) and the RISC-V ABI.</description></item><item><title>RISC-V Assembler: Arithmetic</title><link>https://projectf.io/posts/riscv-arithmetic/</link><pubDate>Mon, 15 Jan 2024 00:00:00 +0000</pubDate><guid>https://projectf.io/posts/riscv-arithmetic/</guid><description>&amp;ldquo;RISC architecture is going to change everything.&amp;rdquo; ‚Äî Acid Burn
In the last few years, we&amp;rsquo;ve seen an explosion of RISC-V CPU designs, especially on FPGA. Thankfully, RISC-V is ideal for assembly programming with its compact, easy-to-learn instruction set. This series will help you learn and understand 32-bit RISC-V instructions (RV32) and the RISC-V ABI. The first part looks at load immediate, addition, and subtraction. We&amp;rsquo;ll also cover sign extension and pseudoinstructions.</description></item><item><title>Mandelbrot in Verilog</title><link>https://projectf.io/posts/mandelbrot-verilog/</link><pubDate>Tue, 07 Mar 2023 00:00:00 +0000</pubDate><guid>https://projectf.io/posts/mandelbrot-verilog/</guid><description>This FPGA demo uses fixed-point multiplication and a small framebuffer to render the Mandelbrot set. You can navigate around the complex plane using buttons on your dev board.
The demo doesn&amp;rsquo;t run at 60 FPS because it only considers one pixel at a time. I may extend the design in future: it currently uses just 9 of the 740 DSPs on the Nexys Video!
Share your thoughts with @WillFlux on Mastodon or Twitter.</description></item><item><title>Verilog Vectors and Arrays</title><link>https://projectf.io/posts/verilog-vectors-arrays/</link><pubDate>Tue, 13 Dec 2022 00:00:00 +0000</pubDate><guid>https://projectf.io/posts/verilog-vectors-arrays/</guid><description>Welcome back to my series covering mathematics and algorithms with FPGAs. In this part, we dig into vectors and arrays, including slicing, configurable widths, for loops, and bit and byte ordering. New to the series? Start with Numbers in Verilog.
Share your thoughts with @WillFlux on Mastodon or Twitter. If you like what I do, sponsor me. üôè
Series Outline Numbers in Verilog - introduction to numbers in Verilog Vectors and Arrays (this post) - working with Verilog vectors and arrays Multiplication with DSPs - efficient multiplication with FPGA DSPs Fixed-Point Numbers in Verilog - precision without complexity Division in Verilog - divided we stand More maths to follow What is a Vector?</description></item><item><title>Multiplication with FPGA DSPs</title><link>https://projectf.io/posts/multiplication-fpga-dsps/</link><pubDate>Sat, 27 Nov 2021 00:00:00 +0000</pubDate><guid>https://projectf.io/posts/multiplication-fpga-dsps/</guid><description>Welcome back to my series covering mathematics and algorithms with FPGAs. Project F is known for its practical, hands-on tutorials. So, I decided to dedicate a post to a topic usually ignored by FPGA authors: multiplication with DSPs. New to the series? Start with Numbers in Verilog.
Share your thoughts with @WillFlux on Mastodon or Twitter. If you like what I do, sponsor me. üôè
Series Outline Numbers in Verilog - introduction to numbers in Verilog Vectors and Arrays - working with Verilog vectors and arrays Multiplication with FPGA DSPs (this post) - efficient multiplication with DSPs Fixed-Point Numbers in Verilog - precision without complexity Division in Verilog - divided we stand More maths to follow DSP Blocks FPGAs incorporate dedicated digital signal processing (DSP) blocks.</description></item><item><title>Numbers in Verilog</title><link>https://projectf.io/posts/numbers-in-verilog/</link><pubDate>Thu, 30 Sep 2021 00:00:00 +0000</pubDate><guid>https://projectf.io/posts/numbers-in-verilog/</guid><description>Welcome to my ongoing series covering mathematics and algorithms with FPGAs. This series begins with the basics of Verilog numbers, then considers fixed-point, division, square roots and CORDIC before covering more complex algorithms, such as data compression.
In this first post, we consider integers, dig into the challenges of signed numbers and expressions, and then finish with a bit of arithmetic.
Share your thoughts with @WillFlux on Mastodon or Twitter. If you like what I do, sponsor me.</description></item><item><title>FPGA Sine Lookup Table</title><link>https://projectf.io/posts/fpga-sine-table/</link><pubDate>Thu, 27 May 2021 00:00:00 +0000</pubDate><guid>https://projectf.io/posts/fpga-sine-table/</guid><description>In this how to, we&amp;rsquo;re going to look at a straightforward method for generating sine and cosine using a lookup table. There are more precise methods, but this one is fast and simple and will suffice for many applications. New to Verilog maths? Check out my introduction to Numbers in Verilog.
Share your thoughts with @WillFlux on Mastodon or Twitter. If you like what I do, sponsor me. üôè
Source The SystemVerilog designs featured in this post are available from the Project F Library under the open-source MIT licence: build on them to your heart&amp;rsquo;s content.</description></item><item><title>Square Root in Verilog</title><link>https://projectf.io/posts/square-root-in-verilog/</link><pubDate>Tue, 22 Dec 2020 00:00:00 +0000</pubDate><guid>https://projectf.io/posts/square-root-in-verilog/</guid><description>The square root is useful in many circumstances, including statistics, graphics, and signal processing. In this how to, we&amp;rsquo;re going to look at a straightforward digit-by-digit square root algorithm for integer and fixed-point numbers. There are lower-latency methods, but this one is simple, using only subtraction and bit shifts. New to Verilog maths? Check out my introduction to Numbers in Verilog.
Share your thoughts with @WillFlux on Mastodon or Twitter. If you like what I do, sponsor me.</description></item><item><title>Life on Screen</title><link>https://projectf.io/posts/life-on-screen/</link><pubDate>Tue, 22 Sep 2020 00:00:00 +0000</pubDate><guid>https://projectf.io/posts/life-on-screen/</guid><description>In this FPGA demo we&amp;rsquo;ll experiment with Game of Life, a cellular automaton created by prolific mathematician John Conway in 1970.
Share your thoughts with @WillFlux on Mastodon or Twitter. If you like what I do, sponsor me. üôè
This demo uses an old framebuffer design. For new projects, I recommend following Framebuffers.
Requirements For this demo you need an FPGA board with video output. I&amp;rsquo;ll be working with the Digilent A7 Arty, but it should be easy to adapt this design to other boards.</description></item><item><title>Division in Verilog</title><link>https://projectf.io/posts/division-in-verilog/</link><pubDate>Wed, 01 Jul 2020 00:00:00 +0000</pubDate><guid>https://projectf.io/posts/division-in-verilog/</guid><description>Division is a fundamental arithmetic operation we take for granted. FPGAs include dedicated hardware to perform addition, subtraction, and multiplication and will infer the necessary logic. Division is different: we need to do it ourselves. This post looks at a straightforward division algorithm for positive integers before extending it to cover fixed-point numbers and signed numbers.
New to Verilog maths? Check out my introduction to Numbers in Verilog.
Share your thoughts with @WillFlux on Mastodon or Twitter.</description></item><item><title>Fixed Point Numbers in Verilog</title><link>https://projectf.io/posts/fixed-point-numbers-in-verilog/</link><pubDate>Tue, 26 May 2020 00:00:00 +0000</pubDate><guid>https://projectf.io/posts/fixed-point-numbers-in-verilog/</guid><description>Sometimes you need more precision than integers can provide, but floating-point computation is not trivial (try reading IEEE 754). You could use a library or IP block, but simple fixed point maths can often get the job done with little effort. Furthermore, most FPGAs have dedicated DSP blocks that make multiplication and addition of integers fast; we can take advantage of that with a fixed-point approach.
New to the series? Start with Numbers in Verilog.</description></item></channel></rss>