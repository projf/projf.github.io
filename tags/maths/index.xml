<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Maths on Project F</title><link>https://projectf.io/tags/maths/</link><description>Recent content in Maths on Project F</description><generator>Hugo</generator><language>en-gb</language><lastBuildDate>Fri, 17 May 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://projectf.io/tags/maths/index.xml" rel="self" type="application/rss+xml"/><item><title>RISC-V Assembler: Shift</title><link>https://projectf.io/posts/riscv-shift/</link><pubDate>Tue, 30 Jan 2024 00:00:00 +0000</pubDate><guid>https://projectf.io/posts/riscv-shift/</guid><description>The third part of our RISC-V assembler series covers shift instructions, such as &lt;strong>sll&lt;/strong> and &lt;strong>srai&lt;/strong>. I&amp;rsquo;ll also explain how to use shift instructions to quickly multiply and divide by powers of two.</description></item><item><title>RISC-V Assembler: Logical</title><link>https://projectf.io/posts/riscv-logical/</link><pubDate>Mon, 29 Jan 2024 00:00:00 +0000</pubDate><guid>https://projectf.io/posts/riscv-logical/</guid><description>The second part of our RISC-V assembler series covers logical instructions, such as &lt;strong>and&lt;/strong> and &lt;strong>xori&lt;/strong>.</description></item><item><title>RISC-V Assembler: Arithmetic</title><link>https://projectf.io/posts/riscv-arithmetic/</link><pubDate>Mon, 15 Jan 2024 00:00:00 +0000</pubDate><guid>https://projectf.io/posts/riscv-arithmetic/</guid><description>In the last few years, we&amp;rsquo;ve seen an explosion of RISC-V CPU designs, especially on FPGA. This series will help you learn and understand 32-bit RISC-V instructions (RV32) and the RISC-V ABI. The first part looks at load immediate, addition, and subtraction. We&amp;rsquo;ll also cover sign extension and pseudoinstructions.</description></item><item><title>Mandelbrot in Verilog</title><link>https://projectf.io/posts/mandelbrot-verilog/</link><pubDate>Tue, 07 Mar 2023 00:00:00 +0000</pubDate><guid>https://projectf.io/posts/mandelbrot-verilog/</guid><description>This FPGA demo uses fixed-point multiplication and a small framebuffer to render the Mandelbrot set. You can navigate around the complex plane using buttons on your dev board.</description></item><item><title>Verilog Vectors and Arrays</title><link>https://projectf.io/posts/verilog-vectors-arrays/</link><pubDate>Tue, 13 Dec 2022 00:00:00 +0000</pubDate><guid>https://projectf.io/posts/verilog-vectors-arrays/</guid><description>Welcome back to my series covering mathematics and algorithms with FPGAs. In this part, we dig into vectors and arrays, including slicing, configurable widths, for loops, and bit and byte ordering.</description></item><item><title>Multiplication with FPGA DSPs</title><link>https://projectf.io/posts/multiplication-fpga-dsps/</link><pubDate>Sat, 27 Nov 2021 00:00:00 +0000</pubDate><guid>https://projectf.io/posts/multiplication-fpga-dsps/</guid><description>Welcome back to my series covering mathematics and algorithms with FPGAs. Project F is known for its practical, hands-on tutorials. So, I decided to dedicate a post to a topic usually ignored by FPGA authors: multiplication with DSPs.</description></item><item><title>Numbers in Verilog</title><link>https://projectf.io/posts/numbers-in-verilog/</link><pubDate>Thu, 30 Sep 2021 00:00:00 +0000</pubDate><guid>https://projectf.io/posts/numbers-in-verilog/</guid><description>Welcome to my ongoing series covering mathematics and algorithms with FPGAs. This series begins with the basics of Verilog numbers, then considers fixed-point, division, square roots and CORDIC before covering more complex algorithms, such as data compression.</description></item><item><title>FPGA Sine Lookup Table</title><link>https://projectf.io/posts/fpga-sine-table/</link><pubDate>Thu, 27 May 2021 00:00:00 +0000</pubDate><guid>https://projectf.io/posts/fpga-sine-table/</guid><description>In this how to, we&amp;rsquo;re going to look at a straightforward method for generating sine and cosine using a lookup table. There are more precise methods, but this one is fast and simple and will suffice for many applications.</description></item><item><title>Square Root in Verilog</title><link>https://projectf.io/posts/square-root-in-verilog/</link><pubDate>Tue, 22 Dec 2020 00:00:00 +0000</pubDate><guid>https://projectf.io/posts/square-root-in-verilog/</guid><description>The square root is useful in many circumstances, including statistics, graphics, and signal processing. In this how to, we&amp;rsquo;re going to look at a straightforward digit-by-digit square root algorithm for integer and fixed-point numbers. There are lower-latency methods, but this one is simple, using only subtraction and bit shifts.</description></item><item><title>Life on Screen</title><link>https://projectf.io/posts/life-on-screen/</link><pubDate>Tue, 22 Sep 2020 00:00:00 +0000</pubDate><guid>https://projectf.io/posts/life-on-screen/</guid><description>In this FPGA demo we&amp;rsquo;ll experiment with Game of Life, a cellular automaton created by prolific mathematician John Conway in 1970.</description></item><item><title>Division in Verilog</title><link>https://projectf.io/posts/division-in-verilog/</link><pubDate>Wed, 01 Jul 2020 00:00:00 +0000</pubDate><guid>https://projectf.io/posts/division-in-verilog/</guid><description>Division is a fundamental arithmetic operation we take for granted. FPGAs include dedicated hardware to perform addition, subtraction, and multiplication and will infer the necessary logic. Division is different: we need to do it ourselves. This post looks at a straightforward division algorithm for positive integers before extending it to cover fixed-point numbers and signed numbers.</description></item><item><title>Fixed Point Numbers in Verilog</title><link>https://projectf.io/posts/fixed-point-numbers-in-verilog/</link><pubDate>Tue, 26 May 2020 00:00:00 +0000</pubDate><guid>https://projectf.io/posts/fixed-point-numbers-in-verilog/</guid><description>Sometimes you need more precision than integers can provide, but floating-point computation is not trivial (try reading IEEE 754). You could use a library or IP block, but simple fixed point maths can often get the job done with little effort. Furthermore, most FPGAs have dedicated DSP blocks that make multiplication and addition of integers fast; we can take advantage of that with a fixed-point approach.</description></item></channel></rss>