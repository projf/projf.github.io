<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>icebreaker on Project F</title><link>https://projectf.io/tags/icebreaker/</link><description>Recent content in icebreaker on Project F</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><lastBuildDate>Sat, 12 Mar 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://projectf.io/tags/icebreaker/index.xml" rel="self" type="application/rss+xml"/><item><title>Racing the Beam</title><link>https://projectf.io/posts/racing-the-beam/</link><pubDate>Sat, 12 Mar 2022 00:00:00 +0000</pubDate><guid>https://projectf.io/posts/racing-the-beam/</guid><description>Welcome back to Exploring FPGA Graphics. Last time, we got an introduction to FPGA graphics; let&amp;rsquo;s put our new graphical skills to work with some simple demo effects. I hope these examples inspire you to create your own effects and improve your hardware design skills.
In this series, we learn about graphics at the hardware level and get a feel for the power of FPGAs. We&amp;rsquo;ll learn how screens work, play Pong, create starfields and sprites, paint Michelangelo&amp;rsquo;s David, draw lines and triangles, and animate characters and shapes.</description></item><item><title>Animated Shapes</title><link>https://projectf.io/posts/animated-shapes/</link><pubDate>Tue, 31 Aug 2021 00:00:00 +0000</pubDate><guid>https://projectf.io/posts/animated-shapes/</guid><description>Welcome back to Exploring FPGA Graphics. In the final part of our introductory graphics series, we&amp;rsquo;re looking at animation. We&amp;rsquo;ve already seen animation with hardware sprites, but double buffering gives us maximum creative freedom with fast, tear-free motion. We&amp;rsquo;ll be making extensive use of our designs from 2D Shapes, so have a look back at that post if you need a refresher on drawing shapes.
In this series, we learn about graphics at the hardware level and get a feel for the power of FPGAs.</description></item><item><title>SPRAM on iCE40 FPGA</title><link>https://projectf.io/posts/spram-ice40-fpga/</link><pubDate>Fri, 30 Jul 2021 00:00:00 +0000</pubDate><guid>https://projectf.io/posts/spram-ice40-fpga/</guid><description>The iCE40 UltraPlus distinguishes itself from the rest of the iCE40 FPGA family by including a relatively generous 1 Mb (128 KiB) of single port synchronous SRAM known as SPRAM. SPRAM blocks are much larger than BRAM but are limited to a single port and 16-bit data bus.
In this quick how to, we learn how to use SPRAM with Yosys and contrast it with Block RAM. If you want to learn more about other FPGA memory, see FPGA Memory Types.</description></item><item><title>2D Shapes</title><link>https://projectf.io/posts/fpga-shapes/</link><pubDate>Wed, 17 Mar 2021 00:00:00 +0000</pubDate><guid>https://projectf.io/posts/fpga-shapes/</guid><description>Welcome back to Exploring FPGA Graphics. In 2D Shapes, we build on what we learned from Lines and Triangles in two ways: drawing new shapes and learning to colour them in. We&amp;rsquo;ll start with rectangles and filled triangles before moving on to circles. These basic shapes make it possible to create a wide variety of graphics and user interfaces.
In this series, we learn about graphics at the hardware level and get a feel for the power of FPGAs.</description></item><item><title>Lines and Triangles</title><link>https://projectf.io/posts/lines-and-triangles/</link><pubDate>Thu, 28 Jan 2021 00:00:00 +0000</pubDate><guid>https://projectf.io/posts/lines-and-triangles/</guid><description>Welcome back to Exploring FPGA Graphics. It&amp;rsquo;s time to turn our attention to drawing. Most modern computer graphics come down to drawing triangles and colouring them in. So, it seems fitting to begin our drawing tour with triangles and the straight lines that form them. This post will implement Bresenham&amp;rsquo;s line algorithm in Verilog and create lines, triangles, and even a cube (our first sort-of 3D).
In this series, we learn about graphics at the hardware level and get a feel for the power of FPGAs.</description></item><item><title>iCE40 FPGA Toolchain on Linux</title><link>https://projectf.io/posts/building-ice40-fpga-toolchain/</link><pubDate>Wed, 11 Nov 2020 00:00:00 +0000</pubDate><guid>https://projectf.io/posts/building-ice40-fpga-toolchain/</guid><description>Since I tested FPGA development tools on Ubuntu 20.04, there have been requests for more posts on FPGA tooling. In this post, I provide a quick guide to building an open-source FPGA toolchain for iCE40 boards, such as iCEBreaker. I plan to cover ECP5 FPGAs in a future version.
This guide is designed for Ubuntu or Pop!_OS 20.04, but should be straightforward to adjust to your own distro. These instructions will work on Windows Subsystem for Linux (WSL), but there&amp;rsquo;s no USB support in WSL, so you can&amp;rsquo;t program boards under WSL.</description></item><item><title>Framebuffers</title><link>https://projectf.io/posts/framebuffers/</link><pubDate>Fri, 30 Oct 2020 00:00:00 +0000</pubDate><guid>https://projectf.io/posts/framebuffers/</guid><description>Welcome back to Exploring FPGA Graphics. In the previous part, we worked with sprites, but another approach is needed as graphics become more complex. Instead of drawing directly to the screen, we draw to a bitmap, which is read out to the screen. This post provides an introduction to framebuffers and how to scale them up. We&amp;rsquo;ll also learn how to fizzlefade graphics Wolfenstein 3D style.
In this series, we learn about graphics at the hardware level and get a feel for the power of FPGAs.</description></item><item><title>Hardware Sprites</title><link>https://projectf.io/posts/hardware-sprites/</link><pubDate>Wed, 28 Oct 2020 00:00:00 +0000</pubDate><guid>https://projectf.io/posts/hardware-sprites/</guid><description>Welcome back to Exploring FPGA Graphics. In the previous part, we updated our display signals and learnt about colour palettes. This part shows you how to create fast, colourful graphics with minimal logic. Hardware sprites maintain much of the simplicity of our Pong design while offering greater creative freedom.
In this series, we learn about graphics at the hardware level and get a feel for the power of FPGAs. We&amp;rsquo;ll learn how screens work, play Pong, create starfields and sprites, paint Michelangelo&amp;rsquo;s David, draw lines and triangles, and animate characters and shapes.</description></item><item><title>FPGA Pong</title><link>https://projectf.io/posts/fpga-pong/</link><pubDate>Thu, 30 Jul 2020 00:00:00 +0000</pubDate><guid>https://projectf.io/posts/fpga-pong/</guid><description>Welcome back to Exploring FPGA Graphics. Last time, we raced the beam; this time, we&amp;rsquo;ll recreate the arcade classic, Pong and play against our FPGA.
In this series, we learn about graphics at the hardware level and get a feel for the power of FPGAs. We&amp;rsquo;ll learn how screens work, play Pong, create starfields and sprites, paint Michelangelo&amp;rsquo;s David, draw lines and triangles, and animate characters and shapes. New to the series?</description></item><item><title>Beginning FPGA Graphics</title><link>https://projectf.io/posts/fpga-graphics/</link><pubDate>Wed, 20 May 2020 00:00:00 +0000</pubDate><guid>https://projectf.io/posts/fpga-graphics/</guid><description>Welcome to Exploring FPGA Graphics. In this series, we learn about graphics at the hardware level and get a feel for the power of FPGAs. We&amp;rsquo;ll learn how screens work, play Pong, create starfields and sprites, paint Michelangelo&amp;rsquo;s David, draw lines and triangles, and animate characters and shapes. Along the way, you&amp;rsquo;ll experience a range of designs and techniques, from memory and finite state machines to crossing clock domains and translating C algorithms into Verilog.</description></item></channel></rss>