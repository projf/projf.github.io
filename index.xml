<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Project F - FPGA Development</title>
    <link>https://projectf.io/</link>
    <description>Recent content on Project F - FPGA Development</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <copyright>©2021 Will Green, Project F</copyright>
    <lastBuildDate>Thu, 01 Jul 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://projectf.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>News: June 2021</title>
      <link>https://projectf.io/posts/news-2021-06/</link>
      <pubDate>Thu, 01 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://projectf.io/posts/news-2021-06/</guid>
      <description>Project F news is your monthly update on my FPGA work, with interesting tips and links thrown in. Last month&amp;rsquo;s issue was well received, so I&amp;rsquo;m continuing with the experiment. If you have any comments, find me on Twitter @WillFlux, or open an issue on GitHub.
Read the previous news.
Blog June saw one new blog post: Verilog Simulation with Verilator and SDL. Simulation of graphical hardware is one of those things that seems intimidating, but Verilator and SDL make it straightforward.</description>
    </item>
    
    <item>
      <title>Verilog Simulation with Verilator and SDL</title>
      <link>https://projectf.io/posts/verilog-sim-verilator-sdl/</link>
      <pubDate>Fri, 11 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://projectf.io/posts/verilog-sim-verilator-sdl/</guid>
      <description>It can be challenging to test your FPGA or ASIC graphics designs. You can perform low-level behavioural simulations and examine waveforms, but you also need to verify how the video output will appear on the screen.
By combining Verilator and SDL, you can build Verilog simulations that let you see your design on your computer. The thought of creating a graphical simulation can be intimidating, but it&amp;rsquo;s surprisingly simple: you can get a simulation running in under an hour.</description>
    </item>
    
    <item>
      <title>News: May 2021</title>
      <link>https://projectf.io/posts/news-2021-05/</link>
      <pubDate>Sun, 30 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://projectf.io/posts/news-2021-05/</guid>
      <description>As well as the occasional big blog post, I make many smaller FPGA discoveries and Project F updates each month. I thought it would be interesting to share a few of these in a monthly news post. What do you think? Let me know via @WillFlux or open an issue on GitHub.
See the latest news or read June 2021.
Blog In May, I added two blog posts: Hello Arty Part 3 and FPGA Sine Lookup Table.</description>
    </item>
    
    <item>
      <title>FPGA Sine Lookup Table</title>
      <link>https://projectf.io/posts/fpga-sine-table/</link>
      <pubDate>Thu, 27 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://projectf.io/posts/fpga-sine-table/</guid>
      <description>In this FPGA recipe, we&amp;rsquo;re going to look at a straightforward method for generating sine and cosine using a lookup table. There are more precise methods, but this one is fast and simple and will suffice for many applications.
This post is part of a series of handy recipes to solve common FPGA development problems. There are also posts on fixed-point numbers, division, and square root.
Updated 2021-06-28. Get in touch with @WillFlux or open an issue on GitHub.</description>
    </item>
    
    <item>
      <title>Hello Arty - Part 3</title>
      <link>https://projectf.io/posts/hello-arty-3/</link>
      <pubDate>Mon, 17 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://projectf.io/posts/hello-arty-3/</guid>
      <description>Welcome back to our three-part FPGA tutorial with SystemVerilog and the Digilent Arty A7. In this third instalment, we build a countdown timer and model traffic lights. There&amp;rsquo;s a lot to get through this time: enums, case statements, button debouncing, shift registers, and the all-important finite state machine. A version for the Nexys Video will be available soon.
New to the series? Start with part 1.
Draft post: fixes and improvements to come.</description>
    </item>
    
    <item>
      <title>Project F Verilog Library</title>
      <link>https://projectf.io/posts/verilog-library-announcement/</link>
      <pubDate>Tue, 27 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://projectf.io/posts/verilog-library-announcement/</guid>
      <description>I like to learn by doing, by trying things out and experimenting. However, this is hard with FPGAs; there’s a significant lack of practical Verilog designs online. The Project F Library is the latest part of my attempt to make things a little better for FPGA beginners and hackers. Over the last couple of years, I’ve built up a small collection of handy Verilog modules as part of this blog. The Library brings these modules together with documentation and test benches to make them more accessible.</description>
    </item>
    
    <item>
      <title>2D Shapes</title>
      <link>https://projectf.io/posts/fpga-shapes/</link>
      <pubDate>Wed, 17 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://projectf.io/posts/fpga-shapes/</guid>
      <description>Welcome back to Exploring FPGA Graphics. This time we&amp;rsquo;re going to build on our work in lines and triangles by drawing more shapes and filling them in before using our framebuffer to animate them.
In this series, we explore graphics at the hardware level and get a feel for the power of FPGAs. We&amp;rsquo;ll learn how displays work, race the beam with Pong, animate starfields and sprites, paint Michelangelo&amp;rsquo;s David, simulate life with bitmaps, draw lines and shapes, and finally render simple 3D models.</description>
    </item>
    
    <item>
      <title>Hello Nexys - Part 2</title>
      <link>https://projectf.io/posts/hello-nexys-2/</link>
      <pubDate>Thu, 11 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://projectf.io/posts/hello-nexys-2/</guid>
      <description>Welcome back to our three-part FPGA tutorial with SystemVerilog and the Digilent Nexys Video. In part two, we&amp;rsquo;re going to learn about clocks and counting. Along the way, we&amp;rsquo;ll cover maintaining state with flip-flops, timing things with clock dividers, creating our first Verilog module, and controlling LEDs with pulse width modulation. This post is also available for the Arty.
New to the series? Start with part 1.
Updated 2021-06-28. Get in touch with @WillFlux or open an issue on GitHub.</description>
    </item>
    
    <item>
      <title>Lines and Triangles</title>
      <link>https://projectf.io/posts/lines-and-triangles/</link>
      <pubDate>Thu, 28 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://projectf.io/posts/lines-and-triangles/</guid>
      <description>Welcome back to Exploring FPGA Graphics. It&amp;rsquo;s time to turn our attention to drawing. Most modern computer graphics come down to drawing triangles and colouring them in. So, it seems fitting to begin our tour of drawing with triangles and the straight lines that form them. This post will implement Bresenham&amp;rsquo;s line algorithm in Verilog, creating lines, triangles, and even a cube (our first sort-of-3D graphic).
In this series, we explore graphics at the hardware level and get a feel for the power of FPGAs.</description>
    </item>
    
    <item>
      <title>Verilog Lint with Verilator</title>
      <link>https://projectf.io/posts/verilog-lint-with-verilator/</link>
      <pubDate>Thu, 31 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://projectf.io/posts/verilog-lint-with-verilator/</guid>
      <description>Hardware design can be unforgiving, so it pays to use any advantage you can get. Verilator is a Verilog simulator and C++ compiler that also supports linting: statically analysing your designs for issues. Not only can Verilator spot problems your synthesis tool might overlook, but it also runs quickly.
Updated 2021-04-01. Feedback to @WillFlux is most welcome.
Installing Verilator Verilator is available in most Linux distribution repos and will run on Windows Subsystem for Linux.</description>
    </item>
    
    <item>
      <title>Square Root in Verilog</title>
      <link>https://projectf.io/posts/square-root-in-verilog/</link>
      <pubDate>Tue, 22 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://projectf.io/posts/square-root-in-verilog/</guid>
      <description>The square root is useful in many circumstances, including statistics, graphics, and signal processing. In this FPGA recipe, we&amp;rsquo;re going to look at a straightforward digit-by-digit square root algorithm for integer and fixed-point numbers. There are lower-latency methods, but this one is simple, using only subtraction and bit shifts.
This post is part of a series of handy recipes to solve common FPGA development problems. There are also posts on fixed-point numbers, division, and sine &amp;amp; cosine.</description>
    </item>
    
    <item>
      <title>Building iCE40 FPGA Toolchain on Linux</title>
      <link>https://projectf.io/posts/building-ice40-fpga-toolchain/</link>
      <pubDate>Wed, 11 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://projectf.io/posts/building-ice40-fpga-toolchain/</guid>
      <description>Since I tested FPGA development tools on Ubuntu 20.04, there have been requests for more posts on FPGA tooling. In this post, I provide a quick guide to building an open-source FPGA toolchain for iCE40 boards, such as iCEBreaker. I plan to cover ECP5 FPGAs in a future version.
This guide is designed for Ubuntu or Pop!_OS 20.04, but should be straightforward to adjust to your own distro. These instructions will work on Windows Subsystem for Linux (WSL), but there&amp;rsquo;s no USB support in WSL, so you can&amp;rsquo;t program boards under WSL.</description>
    </item>
    
    <item>
      <title>Hello Nexys - Part 1</title>
      <link>https://projectf.io/posts/hello-nexys-1/</link>
      <pubDate>Wed, 04 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://projectf.io/posts/hello-nexys-1/</guid>
      <description>This three-part tutorial provides a quick introduction to FPGA development with SystemVerilog and the Digilent Nexys Video board. No prior experience of FPGA development is required, but basic knowledge of programming concepts is assumed. If you can write a simple program with Python or JavaScript, you shouldn&amp;rsquo;t have any trouble.
I find working with FPGAs gives me a sense of delight so often lacking in modern software development. There&amp;rsquo;s something profoundly satisfying about designing at the hardware level, be it drawing graphics on a screen, producing sound from a speaker, or even implementing your own CPU from scratch.</description>
    </item>
    
    <item>
      <title>Framebuffers</title>
      <link>https://projectf.io/posts/framebuffers/</link>
      <pubDate>Fri, 30 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://projectf.io/posts/framebuffers/</guid>
      <description>Welcome back to Exploring FPGA Graphics. In the previous two parts, we worked with sprites, but another approach is needed as graphics become more complex. Instead of drawing directly to the screen, we draw to a framebuffer, which is read out to the screen. This post provides an introduction to framebuffers and how to scale them up. We&amp;rsquo;ll also learn how to fizzlefade graphics Wolfenstein 3D style. In the next part, we&amp;rsquo;ll use a framebuffer to visualize a simulation of life.</description>
    </item>
    
    <item>
      <title>Hardware Sprites</title>
      <link>https://projectf.io/posts/hardware-sprites/</link>
      <pubDate>Wed, 28 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://projectf.io/posts/hardware-sprites/</guid>
      <description>Welcome back to Exploring FPGA Graphics. In the previous part, we recreated Pong. In this part, we learn how to create colourful animated graphics with hardware sprites. Hardware sprites maintain much of the simplicity of our Pong design while offering much greater creative freedom. In the next part, we&amp;rsquo;ll create a demo that gives a taste of what&amp;rsquo;s possible with sprites.
In this series, we explore graphics at the hardware level and get a feel for the power of FPGAs.</description>
    </item>
    
    <item>
      <title>Life on Screen</title>
      <link>https://projectf.io/posts/life-on-screen/</link>
      <pubDate>Tue, 22 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://projectf.io/posts/life-on-screen/</guid>
      <description>Welcome back to Exploring FPGA Graphics. In this post we&amp;rsquo;re going to use the designs we created in Framebuffers to experiment with Conway&amp;rsquo;s Game of Life.
In this series, we explore graphics at the hardware level and get a feel for the power of FPGAs. We&amp;rsquo;ll learn how displays work, race the beam with Pong, animate starfields and sprites, paint Michelangelo&amp;rsquo;s David, simulate life with bitmaps, draw lines and shapes, and finally render simple 3D models.</description>
    </item>
    
    <item>
      <title>FPGA Memory Types</title>
      <link>https://projectf.io/posts/fpga-memory-types/</link>
      <pubDate>Mon, 24 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://projectf.io/posts/fpga-memory-types/</guid>
      <description>Designing with FPGAs involves many types of memory, some familiar from other devices, but some that are specific to FPGAs. This FPGA recipe gives a quick overview of the different flavours, together with their strengths and weaknesses, and some sample designs. This guide includes external memory types, such as SRAM and HBM, that are used in CPUs and GPUs, so much of what is said here is generally applicable, but the focus is on FPGAs.</description>
    </item>
    
    <item>
      <title>Pong</title>
      <link>https://projectf.io/posts/fpga-pong/</link>
      <pubDate>Thu, 30 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://projectf.io/posts/fpga-pong/</guid>
      <description>Welcome back to Exploring FPGA Graphics. In the previous part, we got an introduction to FPGA graphics; now we&amp;rsquo;re ready to put our graphical skills to work recreating the arcade classic: Pong.
In this series, we explore graphics at the hardware level and get a feel for the power of FPGAs. We&amp;rsquo;ll learn how displays work, race the beam with Pong, animate starfields and sprites, paint Michelangelo&amp;rsquo;s David, simulate life with bitmaps, draw lines and shapes, and finally render simple 3D models.</description>
    </item>
    
    <item>
      <title>Division in Verilog</title>
      <link>https://projectf.io/posts/division-in-verilog/</link>
      <pubDate>Wed, 01 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://projectf.io/posts/division-in-verilog/</guid>
      <description>Division is a fundamental arithmetic operation; one we take for granted in most contexts. FPGAs are different; Verilog can&amp;rsquo;t synthesize division: we need to do it ourselves. In this FPGA recipe, we&amp;rsquo;re going to look at a straightforward division algorithm for positive integers and fixed-point numbers. For integers, this method takes one cycle per bit: 32 cycles for 32-bit numbers.
This post is part of a series of handy recipes to solve common FPGA development problems.</description>
    </item>
    
    <item>
      <title>Video Timings: VGA, SVGA, 720p, 1080p</title>
      <link>https://projectf.io/posts/video-timings-vga-720p-1080p/</link>
      <pubDate>Fri, 26 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://projectf.io/posts/video-timings-vga-720p-1080p/</guid>
      <description>To work with standard monitors and TVs, you need to use the correct video timings. This recipe includes the timings for four standard display modes using analogue VGA, DVI, HDMI, or DisplayPort: 640x480 (VGA), 800x600 (SVGA), 1280x720, and 1920x1080 all at 60 Hz.
CRT monitors typically support higher refresh rates in addition to 60 Hz, such as 72 and 85 Hz, but most LCD monitors do not. There are an increasing number of televisions and monitors that do support high refresh rates, but these are beyond the scope of this guide.</description>
    </item>
    
    <item>
      <title>Ad Astra</title>
      <link>https://projectf.io/posts/fpga-ad-astra/</link>
      <pubDate>Wed, 10 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://projectf.io/posts/fpga-ad-astra/</guid>
      <description>Welcome back to Exploring FPGA Graphics. In the previous part we learnt how to create hardware sprites. In this fourth part, we create a demo by combining our knowledge of sprites with animated starfields.
In this series, we explore graphics at the hardware level and get a feel for the power of FPGAs. We&amp;rsquo;ll learn how displays work, race the beam with Pong, animate starfields and sprites, paint Michelangelo&amp;rsquo;s David, simulate life with bitmaps, draw lines and shapes, and finally render simple 3D models.</description>
    </item>
    
    <item>
      <title>Fixed Point Numbers in Verilog</title>
      <link>https://projectf.io/posts/fixed-point-numbers-in-verilog/</link>
      <pubDate>Tue, 26 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://projectf.io/posts/fixed-point-numbers-in-verilog/</guid>
      <description>Sometimes you need more precision than integers can provide, but floating-point computation is not trivial (try reading IEEE 754). You could use a library or IP block, but simple fixed point maths can often get the job done with little effort. Furthermore, most FPGAs have dedicated DSP blocks that make multiplication and addition of integers fast; we can take advantage of that with a fixed-point approach.
This post is part of a series of handy recipes to solve common FPGA development problems.</description>
    </item>
    
    <item>
      <title>FPGA Graphics</title>
      <link>https://projectf.io/posts/fpga-graphics/</link>
      <pubDate>Wed, 20 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://projectf.io/posts/fpga-graphics/</guid>
      <description>Welcome to Exploring FPGA Graphics. In this series, we explore graphics at the hardware level and get a feel for the power of FPGAs. We&amp;rsquo;ll learn how displays work, race the beam with Pong, animate starfields and sprites, paint Michelangelo&amp;rsquo;s David, simulate life with bitmaps, draw lines and shapes, and finally render simple 3D models. Along the way, you&amp;rsquo;ll experience a Smörgåsbord of designs and techniques, from BRAM and finite state machines to crossing clock domains and translating C algorithms into Verilog.</description>
    </item>
    
    <item>
      <title>Hello Arty - Part 2</title>
      <link>https://projectf.io/posts/hello-arty-2/</link>
      <pubDate>Wed, 06 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://projectf.io/posts/hello-arty-2/</guid>
      <description>Welcome back to our three-part FPGA tutorial with SystemVerilog and the Digilent Arty A7. In part two, we&amp;rsquo;re going to learn about clocks and counting. Along the way, we&amp;rsquo;ll cover maintaining state with flip-flops, timing things with clock dividers, creating our first Verilog module, and controlling LEDs with pulse width modulation. You might be surprised how far counting takes you: by the end of this tutorial, you&amp;rsquo;ll be creating RGB lighting effects worthy of a cheesy gaming PC.</description>
    </item>
    
    <item>
      <title>Hello Arty - Part 1</title>
      <link>https://projectf.io/posts/hello-arty-1/</link>
      <pubDate>Fri, 24 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://projectf.io/posts/hello-arty-1/</guid>
      <description>This three-part tutorial provides a quick introduction to FPGA development with SystemVerilog and the Digilent Arty A7 board. No prior experience of FPGA development is required, but basic knowledge of programming concepts is assumed. If you can write a simple program with Python or JavaScript, you shouldn&amp;rsquo;t have any trouble.
I find working with FPGAs gives me a sense of delight so often lacking in modern software development. There&amp;rsquo;s something profoundly satisfying about designing at the hardware level, be it drawing graphics on a screen, producing sound from a speaker, or even implementing your own CPU from scratch.</description>
    </item>
    
    <item>
      <title>Initialize Memory in Verilog</title>
      <link>https://projectf.io/posts/initialize-memory-in-verilog/</link>
      <pubDate>Thu, 16 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://projectf.io/posts/initialize-memory-in-verilog/</guid>
      <description>It&amp;rsquo;s common for a simulation or firmware to need data loading into a memory array, ram, or rom. Fortunately, Verilog provides the $readmemh and $readmemb functions for this very purpose. Unfortunately, there is a dearth of good Verilog documentation online, so using them can be harder than it should be. This FPGA recipe explains the syntax and provides plenty of examples, including how to do this in Xilinx Vivado.
If you want to learn more about FPGA memory itself, see FPGA Memory Types.</description>
    </item>
    
    <item>
      <title>FPGA Tooling on Ubuntu 20.04</title>
      <link>https://projectf.io/posts/fpga-dev-ubuntu-20.04/</link>
      <pubDate>Mon, 06 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://projectf.io/posts/fpga-dev-ubuntu-20.04/</guid>
      <description>In this post, I test common FPGA tools for compatibility with Ubuntu 20.04 (AKA Focal Fossa), and my regular desktop OS: Pop!_OS 20.04. These tests are in no way exhaustive: I have tried using the applications as I usually do to exercise the main functionality. I have also included instructions for building the tools from source when available. This is my final planned update for this post (July 2020).
 Tested: IceStorm Tools, nextpnr, nMigen, Verilator, Vivado, Yosys Incomplete: Quartus  Updated 2020-07-30.</description>
    </item>
    
    <item>
      <title>About Project F</title>
      <link>https://projectf.io/about/</link>
      <pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://projectf.io/about/</guid>
      <description>There&amp;rsquo;s something profoundly satisfying about designing at the hardware level, be it creating your own arcade game, handling unusual hardware interfaces, mining cryptocurrencies, building your own robot, analysing oodles of data, or even developing your own CPU. I find working with FPGAs gives me a sense of delight so often lacking in modern software development.
An FPGA is like a giant virtual breadboard or Lego for electronics: if you can imagine it, you can probably build it.</description>
    </item>
    
    <item>
      <title>Project F Sitemap</title>
      <link>https://projectf.io/sitemap/</link>
      <pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://projectf.io/sitemap/</guid>
      <description>FPGA Library The Project F Library includes handy Verilog designs from across Project F.
Read the Verilog Library Announcement or visit the Library on GitHub.
FPGA Graphics Learn graphics at the hardware level, create games and demos, improve your FPGA design skills:
 FPGA Graphics - learn how displays work and animate simple shapes Pong - race the beam to create the arcade classic Hardware Sprites - fast, colourful, graphics with minimal resources Ad Astra - demo with hardware sprites and animated starfields Framebuffers - driving the display from a bitmap in memory Life on Screen - the screen comes alive with Conway&amp;rsquo;s Game of Life Lines and Triangles - drawing lines and triangles with a framebuffer 2D Shapes - filling and animating shapes Simple 3D - models and wireframe rendering (draft coming soon)  Hello A three-part introduction to FPGA development and Verilog with the Digilent Arty or Nexys Video boards:</description>
    </item>
    
  </channel>
</rss>
