<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Project F</title><link>https://projectf.io/</link><description>Recent content on Project F</description><generator>Hugo</generator><language>en-gb</language><lastBuildDate>Wed, 16 Oct 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://projectf.io/index.xml" rel="self" type="application/rss+xml"/><item><title>RISC-V Assembler: Compiler Explorer</title><link>https://projectf.io/posts/riscv-compiler-explorer/</link><pubDate>Tue, 15 Oct 2024 00:00:00 +0000</pubDate><guid>https://projectf.io/posts/riscv-compiler-explorer/</guid><description>The Godbolt Compiler Explorer is a fantastic tool for assembler programmers. In this post, I show you how to use Compiler Explorer to generate RISC-V assembly code and offer some ideas to make best use of this tool.</description></item><item><title>RISC-V Assembler Cheat Sheet</title><link>https://projectf.io/posts/riscv-cheat-sheet/</link><pubDate>Fri, 14 Jun 2024 00:00:00 +0000</pubDate><guid>https://projectf.io/posts/riscv-cheat-sheet/</guid><description>This cheat sheet provides a handy guide to 32-bit RISC-V instructions. I&amp;rsquo;ve aimed it at software developers, so group instructions by purpose and include common pseudoinstructions.</description></item><item><title>RISC-V Assembler: Multiply Divide</title><link>https://projectf.io/posts/riscv-multiply-divide/</link><pubDate>Fri, 17 May 2024 00:00:00 +0000</pubDate><guid>https://projectf.io/posts/riscv-multiply-divide/</guid><description>Integer multiply and divide instructions form the optional &lt;strong>M&lt;/strong> extension. Making multiplication and division optional keeps the base instruction set simple and reduces the size of the smallest RISC-V core. This post includes a brief overview of common RISC-V extensions.</description></item><item><title>RISC-V Assembler: Jump and Function</title><link>https://projectf.io/posts/riscv-jump-function/</link><pubDate>Tue, 30 Apr 2024 00:00:00 +0000</pubDate><guid>https://projectf.io/posts/riscv-jump-function/</guid><description>This RISC-V assembler post begins by examining the RISC-V jump instructions: &lt;strong>jal&lt;/strong> and &lt;strong>jalr&lt;/strong>. Jump instructions are the basis of functions, so we&amp;rsquo;ll then dig into function calls, the RISC-V ABI, calling convention, and how to use the stack.</description></item><item><title>RISC-V Assembler: Branch Set</title><link>https://projectf.io/posts/riscv-branch-set/</link><pubDate>Tue, 19 Mar 2024 00:00:00 +0000</pubDate><guid>https://projectf.io/posts/riscv-branch-set/</guid><description>This RISC-V assembler post covers branch and set instructions, such as &lt;strong>beq&lt;/strong>, &lt;strong>bltu&lt;/strong>, &lt;strong>bgez&lt;/strong>, and &lt;strong>slt&lt;/strong>. We&amp;rsquo;ll also cover the zero register, program counter, condition codes, and multi-word addition.</description></item><item><title>RISC-V Assembler: Load Store</title><link>https://projectf.io/posts/riscv-load-store/</link><pubDate>Thu, 15 Feb 2024 00:00:00 +0000</pubDate><guid>https://projectf.io/posts/riscv-load-store/</guid><description>This RISC-V assembler post covers load and store instructions, such as &lt;strong>lw&lt;/strong>, &lt;strong>sw&lt;/strong>, and &lt;strong>lbu&lt;/strong>. We also cover memory alignment, addressing modes, and loading symbol addresses.</description></item><item><title>RISC-V Assembler: Shift</title><link>https://projectf.io/posts/riscv-shift/</link><pubDate>Tue, 30 Jan 2024 00:00:00 +0000</pubDate><guid>https://projectf.io/posts/riscv-shift/</guid><description>This RISC-V assembler post covers shift instructions, such as &lt;strong>sll&lt;/strong>, &lt;strong>srl&lt;/strong>, and &lt;strong>srai&lt;/strong>. I also explain how to use shift instructions to quickly multiply and divide by powers of two.</description></item><item><title>RISC-V Assembler: Logical</title><link>https://projectf.io/posts/riscv-logical/</link><pubDate>Mon, 29 Jan 2024 00:00:00 +0000</pubDate><guid>https://projectf.io/posts/riscv-logical/</guid><description>This RISC-V assembler post covers bitwise logical instructions, such as &lt;strong>and&lt;/strong>, &lt;strong>not&lt;/strong>, and &lt;strong>xori&lt;/strong>. Bitwise instructions carry out the specified operator on each bit of the sources in turn.</description></item><item><title>RISC-V Assembler: Arithmetic</title><link>https://projectf.io/posts/riscv-arithmetic/</link><pubDate>Mon, 15 Jan 2024 00:00:00 +0000</pubDate><guid>https://projectf.io/posts/riscv-arithmetic/</guid><description>This series will help you learn and understand 32-bit RISC-V instructions and programming. The first part looks at load immediate, addition, and subtraction. We&amp;rsquo;ll also cover sign extension and pseudoinstructions.</description></item><item><title>News: April 2023</title><link>https://projectf.io/posts/news-2023-04/</link><pubDate>Sat, 29 Apr 2023 00:00:00 +0000</pubDate><guid>https://projectf.io/posts/news-2023-04/</guid><description>Welcome to the latest Project F news covering the first part of 2023. In this edition, we sail the sea of chaos, round out division, automate Vivado with Tcl, and uncover openFPGALoader and cocotb.</description></item><item><title>Vivado Tcl Build Script</title><link>https://projectf.io/posts/vivado-tcl-build-script/</link><pubDate>Thu, 20 Apr 2023 00:00:00 +0000</pubDate><guid>https://projectf.io/posts/vivado-tcl-build-script/</guid><description>Are you tired of firing up the Vivado GUI to build an FPGA project? You can automate your Xilinx FPGA build using a little Tcl. And you don&amp;rsquo;t even need to know any Tcl. Building your design from a script also comes in handy for continuous integration (CI) and Makefiles. Plus, I&amp;rsquo;ll show you how to quickly program your dev board with openFPGALoader.</description></item><item><title>Mandelbrot in Verilog</title><link>https://projectf.io/posts/mandelbrot-verilog/</link><pubDate>Tue, 07 Mar 2023 00:00:00 +0000</pubDate><guid>https://projectf.io/posts/mandelbrot-verilog/</guid><description>This FPGA demo uses fixed-point multiplication and a small framebuffer to render the Mandelbrot set. You can navigate around the complex plane using buttons on your dev board.</description></item><item><title>News: December 2022</title><link>https://projectf.io/posts/news-2022-12/</link><pubDate>Wed, 04 Jan 2023 00:00:00 +0000</pubDate><guid>https://projectf.io/posts/news-2022-12/</guid><description>Happy New Year and welcome to the latest Project F news covering the end of 2022. This update is packed with maths, graphics and the usual smattering of bits and pieces.</description></item><item><title>Verilog Vectors and Arrays</title><link>https://projectf.io/posts/verilog-vectors-arrays/</link><pubDate>Tue, 13 Dec 2022 00:00:00 +0000</pubDate><guid>https://projectf.io/posts/verilog-vectors-arrays/</guid><description>Welcome back to my series covering mathematics and algorithms with FPGAs. In this part, we dig into vectors and arrays, including slicing, configurable widths, for loops, and bit and byte ordering.</description></item><item><title>Rasterbars</title><link>https://projectf.io/posts/rasterbars/</link><pubDate>Wed, 23 Nov 2022 00:00:00 +0000</pubDate><guid>https://projectf.io/posts/rasterbars/</guid><description>This FPGA demo effect renders four animated rasterbars. I created this effect with benjamin.computer for &lt;em>All You Need&lt;/em>, a Chapterhouse prod released at Revision 2022.</description></item><item><title>Sine Scroller</title><link>https://projectf.io/posts/sinescroll/</link><pubDate>Mon, 24 Oct 2022 00:00:00 +0000</pubDate><guid>https://projectf.io/posts/sinescroll/</guid><description>This FPGA demo effect renders a horizontally scrolling message along a sine wave. I created this effect with benjamin.computer for &lt;em>All You Need&lt;/em>, a Chapterhouse prod released at Revision 2022.</description></item><item><title>News: September 2022</title><link>https://projectf.io/posts/news-2022-09/</link><pubDate>Thu, 22 Sep 2022 00:00:00 +0000</pubDate><guid>https://projectf.io/posts/news-2022-09/</guid><description>Welcome to Project F news for July, August, and September 2022. There are four blog posts to cover and plans for the remainder of 2022.</description></item><item><title>Castle Drawing</title><link>https://projectf.io/posts/castle-drawing/</link><pubDate>Sun, 11 Sep 2022 00:00:00 +0000</pubDate><guid>https://projectf.io/posts/castle-drawing/</guid><description>In this FPGA demo, we use multiple shapes (rectangles, triangles, circles) to render a simple picture of a castle. We don&amp;rsquo;t use any software or CPU, just shape rasterization and finite state machines. This Verilog design runs on the Digilent Arty A7 or as a Verilator/SDL simulation on your computer.</description></item><item><title>News: June 2022</title><link>https://projectf.io/posts/news-2022-06/</link><pubDate>Fri, 24 Jun 2022 00:00:00 +0000</pubDate><guid>https://projectf.io/posts/news-2022-06/</guid><description>Project F news is back! It&amp;rsquo;s been a while, so this edition covers the first half of 2022. There are six new blog posts to cover as well as plans for the next few months.</description></item><item><title>Lib: clock/xd</title><link>https://projectf.io/posts/lib-clock-xd/</link><pubDate>Wed, 15 Jun 2022 00:00:00 +0000</pubDate><guid>https://projectf.io/posts/lib-clock-xd/</guid><description>Sometimes you need to send a single pulse from one clock domain to another. This is a simple case of &lt;strong>clock domain crossing&lt;/strong> or &lt;strong>CDC&lt;/strong>. This post uses the &lt;strong>xd&lt;/strong> module from the &lt;em>Project F Library&lt;/em> to handle such situations simply and safely.</description></item><item><title>Display Signals</title><link>https://projectf.io/posts/display-signals/</link><pubDate>Sat, 07 May 2022 00:00:00 +0000</pubDate><guid>https://projectf.io/posts/display-signals/</guid><description>Welcome back to &lt;em>Exploring FPGA Graphics&lt;/em>. Last time, we played Pong against our FPGA; this time, we revisit displays signals and learn about palettes and indexed colour.</description></item><item><title>Racing the Beam</title><link>https://projectf.io/posts/racing-the-beam/</link><pubDate>Sat, 12 Mar 2022 00:00:00 +0000</pubDate><guid>https://projectf.io/posts/racing-the-beam/</guid><description>Welcome back to &lt;em>Exploring FPGA Graphics&lt;/em>. Last time, we got an introduction to FPGA graphics; let&amp;rsquo;s put our new graphical skills to work with some simple demo effects. I hope these examples inspire you to create your own effects and improve your hardware design skills.</description></item><item><title>News: November 2021</title><link>https://projectf.io/posts/news-2021-11/</link><pubDate>Fri, 03 Dec 2021 00:00:00 +0000</pubDate><guid>https://projectf.io/posts/news-2021-11/</guid><description>Welcome to your November news from Project F. This month&amp;rsquo;s new blog post covers multiplication with DSPs, plus there are loads of interesting links and an FPGA advent calendar. I&amp;rsquo;m also happy to report that the main Project F repo &lt;em>projf-explore&lt;/em> passed 200 stars on GitHub.</description></item><item><title>Multiplication with FPGA DSPs</title><link>https://projectf.io/posts/multiplication-fpga-dsps/</link><pubDate>Sat, 27 Nov 2021 00:00:00 +0000</pubDate><guid>https://projectf.io/posts/multiplication-fpga-dsps/</guid><description>Welcome back to my series covering mathematics and algorithms with FPGAs. Project F is known for its practical, hands-on tutorials. So, I decided to dedicate a post to a topic usually ignored by FPGA authors: multiplication with DSPs.</description></item><item><title>News: October 2021</title><link>https://projectf.io/posts/news-2021-10/</link><pubDate>Sun, 31 Oct 2021 00:00:00 +0000</pubDate><guid>https://projectf.io/posts/news-2021-10/</guid><description>Welcome to October&amp;rsquo;s update from Project F. This month, we build a rainbow from circles, learn more about numbers in Verilog, find a UART in the library, and hear about exciting FPGA projects from Ben Blundell and Rob Shelton.</description></item><item><title>News: September 2021</title><link>https://projectf.io/posts/news-2021-09/</link><pubDate>Sat, 09 Oct 2021 00:00:00 +0000</pubDate><guid>https://projectf.io/posts/news-2021-09/</guid><description>Project F news is your monthly bowl of FPGA goodness with tasty tips and links from other developers mixed in. This month I began a new series on &lt;em>Maths &amp;amp; Algorithms&lt;/em>, added a new rotation demo, and started a new blog on computing history. September also saw the release of Yosys 0.10 and the sad death of Sir Clive Sinclair.</description></item><item><title>Numbers in Verilog</title><link>https://projectf.io/posts/numbers-in-verilog/</link><pubDate>Thu, 30 Sep 2021 00:00:00 +0000</pubDate><guid>https://projectf.io/posts/numbers-in-verilog/</guid><description>Welcome to my ongoing series covering mathematics and algorithms with FPGAs. This series begins with the basics of Verilog numbers, then considers fixed-point, division, square roots and CORDIC before covering more complex algorithms, such as data compression.</description></item><item><title>News: August 2021</title><link>https://projectf.io/posts/news-2021-08/</link><pubDate>Fri, 03 Sep 2021 00:00:00 +0000</pubDate><guid>https://projectf.io/posts/news-2021-08/</guid><description>Project F news is your monthly bowl of FPGA goodness with tasty tips and links from other developers mixed in. August saw my first circle drawn, new graphics designs for iCEBreaker, improved build instructions, and the first draft of a new post covering animated graphics and double buffering.</description></item><item><title>Animated Shapes</title><link>https://projectf.io/posts/animated-shapes/</link><pubDate>Tue, 31 Aug 2021 00:00:00 +0000</pubDate><guid>https://projectf.io/posts/animated-shapes/</guid><description>Welcome back to &lt;em>Exploring FPGA Graphics&lt;/em>. In the final part of our introductory graphics series, we&amp;rsquo;re looking at animation. We&amp;rsquo;ve already seen animation with hardware sprites, but double buffering gives us maximum creative freedom with fast, tear-free motion.</description></item><item><title>News: July 2021</title><link>https://projectf.io/posts/news-2021-07/</link><pubDate>Wed, 04 Aug 2021 00:00:00 +0000</pubDate><guid>https://projectf.io/posts/news-2021-07/</guid><description>Project F news is your monthly update on the FPGA project, with tasty tips and links from other developers thrown in. This month, iCE40 SPRAM takes centre stage, filled triangles add graphical goodness, we learn that Linux will fit on an iCEBreaker, and discover FPGAs on Mars.</description></item><item><title>SPRAM on iCE40 FPGA</title><link>https://projectf.io/posts/spram-ice40-fpga/</link><pubDate>Fri, 30 Jul 2021 00:00:00 +0000</pubDate><guid>https://projectf.io/posts/spram-ice40-fpga/</guid><description>The iCE40 UltraPlus distinguishes itself from the rest of the iCE40 FPGA family by including a relatively generous 1 Mb (128 KiB) of single port synchronous SRAM known as &lt;strong>SPRAM&lt;/strong>. SPRAM blocks are much larger than BRAM but are limited to a single port and 16-bit data bus.</description></item><item><title>News: June 2021</title><link>https://projectf.io/posts/news-2021-06/</link><pubDate>Thu, 01 Jul 2021 00:00:00 +0000</pubDate><guid>https://projectf.io/posts/news-2021-06/</guid><description>Project F news is your monthly update on the project, with tasty tips and links thrown in. Last month&amp;rsquo;s issue was well received, so I&amp;rsquo;m continuing with the experiment. June wasn&amp;rsquo;t the easiest of months, with a stint of COVID self-isolation, but I&amp;rsquo;m happy to have written about Verilator and SDL.</description></item><item><title>Verilog Simulation with Verilator and SDL</title><link>https://projectf.io/posts/verilog-sim-verilator-sdl/</link><pubDate>Fri, 11 Jun 2021 00:00:00 +0000</pubDate><guid>https://projectf.io/posts/verilog-sim-verilator-sdl/</guid><description>It can be challenging to test your FPGA or ASIC graphics designs. You can perform low-level behavioural simulations and examine waveforms, but you also need to verify how the video output will appear on the screen. By combining &lt;strong>Verilator&lt;/strong> and &lt;strong>SDL&lt;/strong>, you can build Verilog simulations that let you see your design on your computer.</description></item><item><title>News: May 2021</title><link>https://projectf.io/posts/news-2021-05/</link><pubDate>Sun, 30 May 2021 00:00:00 +0000</pubDate><guid>https://projectf.io/posts/news-2021-05/</guid><description>As well as the occasional big blog post, I make many smaller FPGA discoveries and Project F updates each month. I thought it would be interesting to share a few of these in a monthly news post. What do you think?</description></item><item><title>FPGA Sine Lookup Table</title><link>https://projectf.io/posts/fpga-sine-table/</link><pubDate>Thu, 27 May 2021 00:00:00 +0000</pubDate><guid>https://projectf.io/posts/fpga-sine-table/</guid><description>In this how to, we&amp;rsquo;re going to look at a straightforward method for generating sine and cosine using a lookup table. There are more precise methods, but this one is fast and simple and will suffice for many applications.</description></item><item><title>Hello Arty - Part 3</title><link>https://projectf.io/posts/hello-arty-3/</link><pubDate>Mon, 17 May 2021 00:00:00 +0000</pubDate><guid>https://projectf.io/posts/hello-arty-3/</guid><description>Welcome back to our three-part FPGA tutorial with &lt;strong>SystemVerilog&lt;/strong> and the &lt;strong>Digilent Arty A7&lt;/strong>. In this third instalment, we build a countdown timer and model traffic lights. There&amp;rsquo;s a lot to get through this time: enums, case statements, button debouncing, shift registers, and the all-important finite state machine.</description></item><item><title>Verilog Library Announcement</title><link>https://projectf.io/posts/verilog-library-announcement/</link><pubDate>Tue, 27 Apr 2021 00:00:00 +0000</pubDate><guid>https://projectf.io/posts/verilog-library-announcement/</guid><description>I like to learn by doing, by trying things out and experimenting. However, this is hard with FPGAs; there’s a significant lack of practical Verilog designs online. The Project F Library is the latest part of my attempt to make things a little better for FPGA hackers and beginners.</description></item><item><title>2D Shapes</title><link>https://projectf.io/posts/fpga-shapes/</link><pubDate>Wed, 17 Mar 2021 00:00:00 +0000</pubDate><guid>https://projectf.io/posts/fpga-shapes/</guid><description>Welcome back to Exploring FPGA Graphics. In 2D Shapes, we build on what we learned from Lines and Triangles in two ways: drawing new shapes and learning to colour them in. We&amp;rsquo;ll start with rectangles and filled triangles before moving on to circles. These basic shapes make it possible to create a wide variety of graphics and user interfaces.</description></item><item><title>Hello Nexys - Part 2</title><link>https://projectf.io/posts/hello-nexys-2/</link><pubDate>Thu, 11 Feb 2021 00:00:00 +0000</pubDate><guid>https://projectf.io/posts/hello-nexys-2/</guid><description>Welcome back to our two-part FPGA tutorial with &lt;strong>SystemVerilog&lt;/strong> and the &lt;strong>Digilent Nexys Video&lt;/strong>. In part two, we&amp;rsquo;re going to learn about clocks and counting. Along the way, we&amp;rsquo;ll cover maintaining state with flip-flops, timing things with clock dividers, creating our first Verilog module, and controlling LEDs with pulse width modulation.</description></item><item><title>Lines and Triangles</title><link>https://projectf.io/posts/lines-and-triangles/</link><pubDate>Thu, 28 Jan 2021 00:00:00 +0000</pubDate><guid>https://projectf.io/posts/lines-and-triangles/</guid><description>Welcome back to &lt;em>Exploring FPGA Graphics&lt;/em>. It&amp;rsquo;s time to turn our attention to drawing. Most modern computer graphics come down to drawing triangles and colouring them in. So, it seems fitting to begin our drawing tour with triangles and the straight lines that form them. This post will implement Bresenham&amp;rsquo;s line algorithm in Verilog and create lines, triangles, and even a cube (our first sort-of 3D).</description></item><item><title>Verilog Lint with Verilator</title><link>https://projectf.io/posts/verilog-lint-with-verilator/</link><pubDate>Thu, 31 Dec 2020 00:00:00 +0000</pubDate><guid>https://projectf.io/posts/verilog-lint-with-verilator/</guid><description>Hardware design can be unforgiving, so it pays to use any advantage you can get. &lt;strong>Verilator&lt;/strong> is a Verilog simulator and C++ compiler that also supports linting: statically analysing your designs for issues. Not only can Verilator spot problems your synthesis tool might overlook, but it also runs quickly.</description></item><item><title>Square Root in Verilog</title><link>https://projectf.io/posts/square-root-in-verilog/</link><pubDate>Tue, 22 Dec 2020 00:00:00 +0000</pubDate><guid>https://projectf.io/posts/square-root-in-verilog/</guid><description>The square root is useful in many circumstances, including statistics, graphics, and signal processing. In this how to, we&amp;rsquo;re going to look at a straightforward digit-by-digit square root algorithm for integer and fixed-point numbers. There are lower-latency methods, but this one is simple, using only subtraction and bit shifts.</description></item><item><title>iCE40 FPGA Toolchain on Linux</title><link>https://projectf.io/posts/building-ice40-fpga-toolchain/</link><pubDate>Wed, 11 Nov 2020 00:00:00 +0000</pubDate><guid>https://projectf.io/posts/building-ice40-fpga-toolchain/</guid><description>In this post, I provide a quick guide to building an open-source FPGA toolchain for iCE40 boards, such as iCEBreaker, on Linux. This guide is designed for Ubuntu or Pop!_OS 20.04, but should be straightforward to adjust to your own distro.</description></item><item><title>Hello Nexys - Part 1</title><link>https://projectf.io/posts/hello-nexys-1/</link><pubDate>Wed, 04 Nov 2020 00:00:00 +0000</pubDate><guid>https://projectf.io/posts/hello-nexys-1/</guid><description>This two-part tutorial provides a quick introduction to FPGA development with &lt;strong>SystemVerilog&lt;/strong> and the &lt;strong>Digilent Nexys Video&lt;/strong> board. No prior experience of FPGA development is required, but basic knowledge of programming concepts is assumed. If you can write a simple program with Python or JavaScript, you shouldn&amp;rsquo;t have any trouble.</description></item><item><title>Framebuffers</title><link>https://projectf.io/posts/framebuffers/</link><pubDate>Fri, 30 Oct 2020 00:00:00 +0000</pubDate><guid>https://projectf.io/posts/framebuffers/</guid><description>Welcome back to &lt;em>Exploring FPGA Graphics&lt;/em>. In the previous part, we worked with sprites, but another approach is needed as graphics become more complex. Instead of drawing directly to the screen, we draw to a bitmap, which is read out to the screen. This post provides an introduction to framebuffers and how to scale them up. We&amp;rsquo;ll also learn how to fizzlefade graphics Wolfenstein 3D style.</description></item><item><title>Hardware Sprites</title><link>https://projectf.io/posts/hardware-sprites/</link><pubDate>Wed, 28 Oct 2020 00:00:00 +0000</pubDate><guid>https://projectf.io/posts/hardware-sprites/</guid><description>Welcome back to &lt;em>Exploring FPGA Graphics&lt;/em>. In the previous part, we updated our display signals and learnt about colour palettes. This part shows you how to create fast, colourful graphics with minimal logic. Hardware sprites maintain much of the simplicity of our Pong design while offering greater creative freedom.</description></item><item><title>Life on Screen</title><link>https://projectf.io/posts/life-on-screen/</link><pubDate>Tue, 22 Sep 2020 00:00:00 +0000</pubDate><guid>https://projectf.io/posts/life-on-screen/</guid><description>In this FPGA demo we&amp;rsquo;ll experiment with Game of Life, a cellular automaton created by prolific mathematician John Conway in 1970.</description></item><item><title>FPGA Memory Types</title><link>https://projectf.io/posts/fpga-memory-types/</link><pubDate>Mon, 24 Aug 2020 00:00:00 +0000</pubDate><guid>https://projectf.io/posts/fpga-memory-types/</guid><description>Designing with FPGAs involves many types of memory, some familiar from other devices, but some that are specific to FPGAs. This how to gives a quick overview of the different flavours, together with their strengths and weaknesses, and some sample designs. This guide includes external memory types, such as SRAM and HBM, that are used in CPUs and GPUs, so much of what is said here is generally applicable, but the focus is on FPGAs.</description></item><item><title>FPGA Pong</title><link>https://projectf.io/posts/fpga-pong/</link><pubDate>Thu, 30 Jul 2020 00:00:00 +0000</pubDate><guid>https://projectf.io/posts/fpga-pong/</guid><description>Welcome back to &lt;em>Exploring FPGA Graphics&lt;/em>. Last time, we raced the beam; this time, we&amp;rsquo;ll recreate the arcade classic, Pong and play against our FPGA.</description></item><item><title>Division in Verilog</title><link>https://projectf.io/posts/division-in-verilog/</link><pubDate>Wed, 01 Jul 2020 00:00:00 +0000</pubDate><guid>https://projectf.io/posts/division-in-verilog/</guid><description>Division is a fundamental arithmetic operation we take for granted. FPGAs include dedicated hardware to perform addition, subtraction, and multiplication and will infer the necessary logic. Division is different: we need to do it ourselves. This post looks at a straightforward division algorithm for positive integers before extending it to cover fixed-point numbers and signed numbers.</description></item><item><title>Video Timings: VGA, SVGA, 720p, 1080p</title><link>https://projectf.io/posts/video-timings-vga-720p-1080p/</link><pubDate>Fri, 26 Jun 2020 00:00:00 +0000</pubDate><guid>https://projectf.io/posts/video-timings-vga-720p-1080p/</guid><description>To work with standard monitors and TVs, you need to use the correct video timings. This how to includes the timings for five standard display modes using analogue VGA, DVI, HDMI, or DisplayPort: 640x480 (VGA), 800x600 (SVGA), 1280x720, and 1920x1080 (30 Hz and 60 Hz).</description></item><item><title>Ad Astra</title><link>https://projectf.io/posts/fpga-ad-astra/</link><pubDate>Wed, 10 Jun 2020 00:00:00 +0000</pubDate><guid>https://projectf.io/posts/fpga-ad-astra/</guid><description>This collection of related demos combines some of my earliest FPGA designs from 2018: simple sprites and an animated starfield generated with a linear-feedback shift register.</description></item><item><title>Fixed Point Numbers in Verilog</title><link>https://projectf.io/posts/fixed-point-numbers-in-verilog/</link><pubDate>Tue, 26 May 2020 00:00:00 +0000</pubDate><guid>https://projectf.io/posts/fixed-point-numbers-in-verilog/</guid><description>Sometimes you need more precision than integers can provide, but floating-point computation is not trivial (try reading IEEE 754). You could use a library or IP block, but simple fixed point maths can often get the job done with little effort. Furthermore, most FPGAs have dedicated DSP blocks that make multiplication and addition of integers fast; we can take advantage of that with a fixed-point approach.</description></item><item><title>Beginning FPGA Graphics</title><link>https://projectf.io/posts/fpga-graphics/</link><pubDate>Wed, 20 May 2020 00:00:00 +0000</pubDate><guid>https://projectf.io/posts/fpga-graphics/</guid><description>Welcome to &lt;em>Exploring FPGA Graphics&lt;/em>. In this series, we learn about graphics at the hardware level and get a feel for the power of FPGAs. We&amp;rsquo;ll learn how screens work, play Pong, create starfields and sprites, paint Michelangelo&amp;rsquo;s David, draw lines and triangles, and animate characters and shapes. Along the way, you&amp;rsquo;ll experience a range of designs and techniques, from memory and finite state machines to crossing clock domains and translating C algorithms into Verilog.</description></item><item><title>Hello Arty - Part 2</title><link>https://projectf.io/posts/hello-arty-2/</link><pubDate>Wed, 06 May 2020 00:00:00 +0000</pubDate><guid>https://projectf.io/posts/hello-arty-2/</guid><description>Welcome back to our three-part FPGA tutorial with &lt;strong>SystemVerilog&lt;/strong> and the &lt;strong>Digilent Arty A7&lt;/strong>. In part two, we&amp;rsquo;re going to learn about clocks and counting. Along the way, we&amp;rsquo;ll cover maintaining state with flip-flops, timing things with clock dividers, creating our first Verilog module, and controlling LEDs with pulse width modulation. You might be surprised how far counting takes you: by the end of this tutorial, you&amp;rsquo;ll be creating RGB lighting effects worthy of a cheesy gaming PC.</description></item><item><title>Hello Arty - Part 1</title><link>https://projectf.io/posts/hello-arty-1/</link><pubDate>Fri, 24 Apr 2020 00:00:00 +0000</pubDate><guid>https://projectf.io/posts/hello-arty-1/</guid><description>This three-part tutorial provides a quick introduction to FPGA development with &lt;strong>SystemVerilog&lt;/strong> and the &lt;strong>Digilent Arty A7&lt;/strong> board. No prior experience of FPGA development is required, but basic knowledge of programming concepts is assumed. If you can write a simple program with Python or JavaScript, you shouldn&amp;rsquo;t have any trouble.</description></item><item><title>Initialize Memory in Verilog</title><link>https://projectf.io/posts/initialize-memory-in-verilog/</link><pubDate>Thu, 16 Apr 2020 00:00:00 +0000</pubDate><guid>https://projectf.io/posts/initialize-memory-in-verilog/</guid><description>It&amp;rsquo;s common for a simulation or firmware to need data loading into a memory array, ram, or rom. Fortunately, Verilog provides the &lt;strong>&lt;code>$readmemh&lt;/code>&lt;/strong> and &lt;strong>&lt;code>$readmemb&lt;/code>&lt;/strong> functions for this very purpose. Unfortunately, there is a dearth of good Verilog documentation online, so using them can be harder than it should be. This how to explains the syntax and provides plenty of examples, including how to do this in Yosys and Xilinx Vivado.</description></item><item><title>FPGA Tooling on Ubuntu 20.04</title><link>https://projectf.io/posts/fpga-dev-ubuntu-20.04/</link><pubDate>Mon, 06 Apr 2020 00:00:00 +0000</pubDate><guid>https://projectf.io/posts/fpga-dev-ubuntu-20.04/</guid><description>In this post, I test common FPGA tools for compatibility with Ubuntu 20.04 (AKA Focal Fossa), and my regular desktop OS: Pop!_OS 20.04. These tests are in no way exhaustive: I have tried using the applications as I usually do to exercise the main functionality. I have also included instructions for building the tools from source when available.</description></item><item><title>About Project F</title><link>https://projectf.io/about/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://projectf.io/about/</guid><description>People who are really serious about software should make their own hardware.
Alan Kay, Creative Think seminar (1982)
There&amp;rsquo;s something profoundly satisfying about designing at the hardware level, be it creating your own arcade game, handling unusual hardware interfaces, building your own robot, creating art, analysing oodles of data, or even developing your own CPU. Working with FPGAs gives me a sense of delight so often lacking in modern software development.</description></item><item><title>FPGA &amp; RISC-V Tutorials</title><link>https://projectf.io/tutorials/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://projectf.io/tutorials/</guid><description>Tutorials to get you started and improve your design skills. See also Recommended FPGA sites.
FPGA Graphics Learn graphics at the hardware level and improve your FPGA design skills.
Beginning FPGA Graphics - video signals and basic graphics Racing the Beam - simple demo effects with minimal logic FPGA Pong - recreate the classic arcade on an FPGA Display Signals - revisit display signals and meet colour palettes Hardware Sprites - fast, colourful graphics for games Framebuffers - bitmap graphics featuring Michelangelo&amp;rsquo;s David Lines and Triangles - drawing lines and triangles 2D Shapes - filled shapes and simple pictures Animated Shapes - animation and double-buffering RISC-V Assembler Get comfortable with RISC-V assembler.</description></item><item><title>FPGA Boards</title><link>https://projectf.io/boards/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://projectf.io/boards/</guid><description>I&amp;rsquo;ve decided to focus on other content for now. I may return to this topic in future.
In the meantime, check out my FPGA and RISC-V tutorials.</description></item><item><title>FPGA Demos</title><link>https://projectf.io/demos/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://projectf.io/demos/</guid><description>
My collection of demo effects and quick demos; useful building blocks for full prods.
Castle Drawing - draw a castle and rainbow in 16 colours Life on Screen - Conway&amp;rsquo;s Game of Life in logic Mandelbrot - the fractal classic with fixed-point multiplication Rasterbars - classic animated colour bars Sine Scroller - greet your viewers in style You might also like to check out my graphics tutorials.
Demo Prods Ad Astra - my first FPGA demo from 2018: greetings with starfields and hardware sprites All You Need (Revision 2022) - post will follow when I have a &amp;lsquo;final&amp;rsquo; version Components of this demo, such as Sine Scroller, are available above</description></item><item><title>FPGA How To</title><link>https://projectf.io/howto/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://projectf.io/howto/</guid><description>The How To list has moved to Tutorials.</description></item><item><title>FPGA Tools</title><link>https://projectf.io/tools/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://projectf.io/tools/</guid><description>FPGA development and testing tools. See also Tutorials.
Vivado Tcl Build Script - quick and easy Vivado builds with Tcl Verilog Simulation with Verilator and SDL - blazingly fast way to simulate your designs Verilog Lint with Verilator - quickly check your Verilog designs iCE40 FPGA Toolchain on Linux - building an open source FPGA toolchain for iCE40 FPGA Tooling on Ubuntu 20.04 - testing FPGA tools with Ubuntu 20.04 Focal Fossa</description></item><item><title>Recommended FPGA Sites</title><link>https://projectf.io/recommended-fpga-sites/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://projectf.io/recommended-fpga-sites/</guid><description>This page collects some of my favourite FPGA resources from across the Internet.
FPGA Learning Resources Black Mesa Labs FPGA Tutorial Bruno Levy&amp;rsquo;s Learn FPGA fpga4fun.com fpgacpu.ca Nandland Project F Tutorials Sutherland HDL Verilog Pro Discussion 1BitSquared Discord (iCEBreaker) Digilent Forums (Arty and Nexys) Project F Discussions Radiona Discord (ULX3S) FPGA Reddit Interesting Sites Adiuvo Engineering Blog benjamin.computer Beyond Circuits Bits&amp;rsquo;n&amp;rsquo;Bites Black Mesa Labs Control Paths Craig J Bishop Domipheus Labs Electronics etc&amp;hellip; Fabien Sanglard FPGA CPU News Greg Davill&amp;rsquo;s Projects Hamsterworks (via archive.</description></item><item><title>Site Map</title><link>https://projectf.io/sitemap/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://projectf.io/sitemap/</guid><description>I&amp;rsquo;ve divided the site map across separate pages:
About - about Project F Demos - exploring the possibilities of FPGAs Lib - handy Verilog designs for everyone News - project news (quarterly) Recommended FPGA sites - great content for beginners and experienced designers Tools - FPGA development and testing tools Tutorials - for beginners and anyone looking to develop their hardware design skills</description></item><item><title>Verilog Library</title><link>https://projectf.io/verilog-lib/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://projectf.io/verilog-lib/</guid><description>I like to learn by doing, by trying things out and experimenting. However, this is hard with FPGAs; there’s a significant lack of practical Verilog designs online. The Project F Library is the latest part of my attempt to make things a little better for FPGA hackers and beginners. Over the last few years, I’ve built up a small collection of handy Verilog modules. The Library brings these modules together with documentation and test benches to make them more accessible.</description></item></channel></rss>